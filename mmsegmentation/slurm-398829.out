### START DATE=Sun Jul 30 22:30:17 KST 2023
### HOSTNAME=node05
### CUDA_VISIBLE_DEVICES=0,1,2,3
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[W socket.cpp:401] [c10d] The server socket cannot be initialized on [::]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29500 (errno: 97 - Address family not supported by protocol).
07/30 22:30:29 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.17 (main, Jul  5 2023, 20:41:20) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 777
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /opt/ohpc/pub/apps/cuda/11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 777
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

07/30 22:30:29 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[
        87.33,
        91.29,
        83.01,
    ],
    std=[
        43.75,
        38.6,
        35.43,
    ],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[
            87.33,
            91.29,
            83.01,
        ],
        std=[
            43.75,
            38.6,
            35.43,
        ],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        )),
    pretrained='open-mmlab://resnest101',
    backbone=dict(
        type='ResNeSt',
        depth=101,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        dilations=(
            1,
            1,
            2,
            4,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        stem_channels=128,
        radix=2,
        reduction_factor=4,
        avg_down_stride=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss',
                loss_name='loss_ce',
                use_sigmoid=False,
                loss_weight=1.0),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=1.0),
        ]),
    auxiliary_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss', loss_name='loss_ce', loss_weight=0.4),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=0.4),
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'SatelliteDataset'
data_root = '../datasets/Satellite'
crop_size = (
    256,
    256,
)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='RandomCrop', crop_size=(
        256,
        256,
    )),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='PackSegInputs'),
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[
            [
                dict(type='Resize', scale_factor=0.5, keep_ratio=True),
                dict(type='Resize', scale_factor=0.75, keep_ratio=True),
                dict(type='Resize', scale_factor=1.0, keep_ratio=True),
                dict(type='Resize', scale_factor=1.25, keep_ratio=True),
                dict(type='Resize', scale_factor=1.5, keep_ratio=True),
                dict(type='Resize', scale_factor=1.75, keep_ratio=True),
            ],
            [
                dict(type='RandomFlip', prob=0.0, direction='horizontal'),
                dict(type='RandomFlip', prob=1.0, direction='horizontal'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ]),
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/train_0', seg_map_path='ann_dir/train_0'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='RandomCrop', crop_size=(
                256,
                256,
            )),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs'),
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/val_slice_0',
            seg_map_path='ann_dir/val_slice_0'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='PackSegInputs'),
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(img_path='img_dir/test'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='PackSegInputs'),
        ]))
val_evaluator = dict(
    type='IoUMetric', iou_metrics=[
        'mIoU',
        'mDice',
    ])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=[
        'mIoU',
    ],
    format_only=True,
    output_dir=
    'mask_inference_result/resnest_deeplabv3plus_fold0/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '../model_weights/resnest_deeplabv3plus_fold0.pth'
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(
    type='AdamW', lr=0.0001, betas=(
        0.9,
        0.999,
    ), weight_decay=0.005)
optim_wrapper = dict(
    type='AmpOptimWrapper',
    optimizer=dict(
        type='AdamW', lr=0.0001, betas=(
            0.9,
            0.999,
        ), weight_decay=0.005),
    clip_grad=None,
    loss_scale='dynamic')
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-06,
        power=1.0,
        begin=0,
        end=100000,
        by_epoch=False),
]
train_cfg = dict(
    type='IterBasedTrainLoop', max_iters=100000, val_interval=10000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook', draw=True, interval=1000))
test_img_size = (
    512,
    512,
)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='PackSegInputs'),
]
randomness = dict(seed=777)
launcher = 'pytorch'
work_dir = '_satellite/resnest_deeplabv3plus_fold0'

/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
07/30 22:30:32 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
07/30 22:31:07 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold0.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold0.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold0.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold0.pth
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
07/30 22:31:10 - mmengine - INFO - Load checkpoint from ../model_weights/resnest_deeplabv3plus_fold0.pth
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
07/30 22:31:10 - mmengine - INFO - resumed epoch: 0, iter: 100000
07/30 22:31:27 - mmengine - INFO - Iter(test) [   50/15160]    eta: 1:23:43  time: 0.0437  data_time: 0.0009  memory: 9586  
07/30 22:31:29 - mmengine - INFO - Iter(test) [  100/15160]    eta: 0:47:22  time: 0.0454  data_time: 0.0014  memory: 1339  
07/30 22:31:31 - mmengine - INFO - Iter(test) [  150/15160]    eta: 0:35:10  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 22:31:34 - mmengine - INFO - Iter(test) [  200/15160]    eta: 0:29:02  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 22:31:36 - mmengine - INFO - Iter(test) [  250/15160]    eta: 0:25:20  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 22:31:38 - mmengine - INFO - Iter(test) [  300/15160]    eta: 0:22:54  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 22:31:40 - mmengine - INFO - Iter(test) [  350/15160]    eta: 0:21:09  time: 0.0453  data_time: 0.0017  memory: 1339  
07/30 22:31:43 - mmengine - INFO - Iter(test) [  400/15160]    eta: 0:19:52  time: 0.0452  data_time: 0.0013  memory: 1339  
07/30 22:31:45 - mmengine - INFO - Iter(test) [  450/15160]    eta: 0:18:51  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 22:31:47 - mmengine - INFO - Iter(test) [  500/15160]    eta: 0:18:01  time: 0.0459  data_time: 0.0012  memory: 1339  
07/30 22:31:50 - mmengine - INFO - Iter(test) [  550/15160]    eta: 0:17:19  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 22:31:52 - mmengine - INFO - Iter(test) [  600/15160]    eta: 0:16:44  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 22:31:54 - mmengine - INFO - Iter(test) [  650/15160]    eta: 0:16:15  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 22:31:56 - mmengine - INFO - Iter(test) [  700/15160]    eta: 0:15:48  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:31:59 - mmengine - INFO - Iter(test) [  750/15160]    eta: 0:15:26  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 22:32:01 - mmengine - INFO - Iter(test) [  800/15160]    eta: 0:15:06  time: 0.0461  data_time: 0.0010  memory: 1339  
07/30 22:32:03 - mmengine - INFO - Iter(test) [  850/15160]    eta: 0:14:49  time: 0.0485  data_time: 0.0015  memory: 1339  
07/30 22:32:06 - mmengine - INFO - Iter(test) [  900/15160]    eta: 0:14:34  time: 0.0485  data_time: 0.0015  memory: 1339  
07/30 22:32:08 - mmengine - INFO - Iter(test) [  950/15160]    eta: 0:14:20  time: 0.0468  data_time: 0.0013  memory: 1339  
07/30 22:32:10 - mmengine - INFO - Iter(test) [ 1000/15160]    eta: 0:14:08  time: 0.0488  data_time: 0.0014  memory: 1339  
07/30 22:32:13 - mmengine - INFO - Iter(test) [ 1050/15160]    eta: 0:13:57  time: 0.0467  data_time: 0.0013  memory: 1339  
07/30 22:32:15 - mmengine - INFO - Iter(test) [ 1100/15160]    eta: 0:13:46  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 22:32:17 - mmengine - INFO - Iter(test) [ 1150/15160]    eta: 0:13:35  time: 0.0462  data_time: 0.0012  memory: 1339  
07/30 22:32:20 - mmengine - INFO - Iter(test) [ 1200/15160]    eta: 0:13:25  time: 0.0449  data_time: 0.0009  memory: 1339  
07/30 22:32:22 - mmengine - INFO - Iter(test) [ 1250/15160]    eta: 0:13:15  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 22:32:24 - mmengine - INFO - Iter(test) [ 1300/15160]    eta: 0:13:07  time: 0.0495  data_time: 0.0015  memory: 1339  
07/30 22:32:27 - mmengine - INFO - Iter(test) [ 1350/15160]    eta: 0:12:59  time: 0.0464  data_time: 0.0013  memory: 1339  
07/30 22:32:29 - mmengine - INFO - Iter(test) [ 1400/15160]    eta: 0:12:51  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 22:32:31 - mmengine - INFO - Iter(test) [ 1450/15160]    eta: 0:12:43  time: 0.0461  data_time: 0.0010  memory: 1339  
07/30 22:32:33 - mmengine - INFO - Iter(test) [ 1500/15160]    eta: 0:12:36  time: 0.0459  data_time: 0.0010  memory: 1339  
07/30 22:32:36 - mmengine - INFO - Iter(test) [ 1550/15160]    eta: 0:12:30  time: 0.0469  data_time: 0.0014  memory: 1339  
07/30 22:32:38 - mmengine - INFO - Iter(test) [ 1600/15160]    eta: 0:12:24  time: 0.0465  data_time: 0.0013  memory: 1339  
07/30 22:32:41 - mmengine - INFO - Iter(test) [ 1650/15160]    eta: 0:12:19  time: 0.0603  data_time: 0.0015  memory: 1339  
07/30 22:32:43 - mmengine - INFO - Iter(test) [ 1700/15160]    eta: 0:12:13  time: 0.0471  data_time: 0.0014  memory: 1339  
07/30 22:32:45 - mmengine - INFO - Iter(test) [ 1750/15160]    eta: 0:12:07  time: 0.0473  data_time: 0.0013  memory: 1339  
07/30 22:32:48 - mmengine - INFO - Iter(test) [ 1800/15160]    eta: 0:12:01  time: 0.0442  data_time: 0.0009  memory: 1339  
07/30 22:32:50 - mmengine - INFO - Iter(test) [ 1850/15160]    eta: 0:11:55  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:32:52 - mmengine - INFO - Iter(test) [ 1900/15160]    eta: 0:11:50  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 22:32:55 - mmengine - INFO - Iter(test) [ 1950/15160]    eta: 0:11:45  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 22:32:57 - mmengine - INFO - Iter(test) [ 2000/15160]    eta: 0:11:40  time: 0.0466  data_time: 0.0012  memory: 1339  
07/30 22:32:59 - mmengine - INFO - Iter(test) [ 2050/15160]    eta: 0:11:35  time: 0.0455  data_time: 0.0013  memory: 1339  
07/30 22:33:01 - mmengine - INFO - Iter(test) [ 2100/15160]    eta: 0:11:30  time: 0.0476  data_time: 0.0014  memory: 1339  
07/30 22:33:04 - mmengine - INFO - Iter(test) [ 2150/15160]    eta: 0:11:26  time: 0.0469  data_time: 0.0013  memory: 1339  
07/30 22:33:06 - mmengine - INFO - Iter(test) [ 2200/15160]    eta: 0:11:21  time: 0.0464  data_time: 0.0010  memory: 1339  
07/30 22:33:08 - mmengine - INFO - Iter(test) [ 2250/15160]    eta: 0:11:16  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 22:33:11 - mmengine - INFO - Iter(test) [ 2300/15160]    eta: 0:11:12  time: 0.0473  data_time: 0.0013  memory: 1339  
07/30 22:33:13 - mmengine - INFO - Iter(test) [ 2350/15160]    eta: 0:11:08  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 22:33:16 - mmengine - INFO - Iter(test) [ 2400/15160]    eta: 0:11:04  time: 0.0464  data_time: 0.0014  memory: 1339  
07/30 22:33:18 - mmengine - INFO - Iter(test) [ 2450/15160]    eta: 0:11:00  time: 0.0457  data_time: 0.0013  memory: 1339  
07/30 22:33:20 - mmengine - INFO - Iter(test) [ 2500/15160]    eta: 0:10:56  time: 0.0456  data_time: 0.0013  memory: 1339  
07/30 22:33:22 - mmengine - INFO - Iter(test) [ 2550/15160]    eta: 0:10:52  time: 0.0459  data_time: 0.0014  memory: 1339  
07/30 22:33:25 - mmengine - INFO - Iter(test) [ 2600/15160]    eta: 0:10:48  time: 0.0464  data_time: 0.0013  memory: 1339  
07/30 22:33:27 - mmengine - INFO - Iter(test) [ 2650/15160]    eta: 0:10:45  time: 0.0487  data_time: 0.0014  memory: 1339  
07/30 22:33:29 - mmengine - INFO - Iter(test) [ 2700/15160]    eta: 0:10:41  time: 0.0466  data_time: 0.0011  memory: 1339  
07/30 22:33:32 - mmengine - INFO - Iter(test) [ 2750/15160]    eta: 0:10:37  time: 0.0459  data_time: 0.0014  memory: 1339  
07/30 22:33:34 - mmengine - INFO - Iter(test) [ 2800/15160]    eta: 0:10:34  time: 0.0474  data_time: 0.0014  memory: 1339  
07/30 22:33:37 - mmengine - INFO - Iter(test) [ 2850/15160]    eta: 0:10:30  time: 0.0479  data_time: 0.0013  memory: 1339  
07/30 22:33:39 - mmengine - INFO - Iter(test) [ 2900/15160]    eta: 0:10:27  time: 0.0482  data_time: 0.0015  memory: 1339  
07/30 22:33:41 - mmengine - INFO - Iter(test) [ 2950/15160]    eta: 0:10:23  time: 0.0461  data_time: 0.0013  memory: 1339  
07/30 22:33:43 - mmengine - INFO - Iter(test) [ 3000/15160]    eta: 0:10:19  time: 0.0450  data_time: 0.0013  memory: 1339  
07/30 22:33:46 - mmengine - INFO - Iter(test) [ 3050/15160]    eta: 0:10:16  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 22:33:48 - mmengine - INFO - Iter(test) [ 3100/15160]    eta: 0:10:12  time: 0.0465  data_time: 0.0013  memory: 1339  
07/30 22:33:50 - mmengine - INFO - Iter(test) [ 3150/15160]    eta: 0:10:09  time: 0.0469  data_time: 0.0011  memory: 1339  
07/30 22:33:53 - mmengine - INFO - Iter(test) [ 3200/15160]    eta: 0:10:06  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 22:33:55 - mmengine - INFO - Iter(test) [ 3250/15160]    eta: 0:10:02  time: 0.0446  data_time: 0.0008  memory: 1339  
07/30 22:33:57 - mmengine - INFO - Iter(test) [ 3300/15160]    eta: 0:09:58  time: 0.0439  data_time: 0.0009  memory: 1339  
07/30 22:33:59 - mmengine - INFO - Iter(test) [ 3350/15160]    eta: 0:09:55  time: 0.0447  data_time: 0.0008  memory: 1339  
07/30 22:34:02 - mmengine - INFO - Iter(test) [ 3400/15160]    eta: 0:09:52  time: 0.0465  data_time: 0.0013  memory: 1339  
07/30 22:34:04 - mmengine - INFO - Iter(test) [ 3450/15160]    eta: 0:09:48  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 22:34:06 - mmengine - INFO - Iter(test) [ 3500/15160]    eta: 0:09:45  time: 0.0446  data_time: 0.0011  memory: 1339  
07/30 22:34:09 - mmengine - INFO - Iter(test) [ 3550/15160]    eta: 0:09:42  time: 0.0446  data_time: 0.0011  memory: 1339  
07/30 22:34:11 - mmengine - INFO - Iter(test) [ 3600/15160]    eta: 0:09:39  time: 0.0464  data_time: 0.0010  memory: 1339  
07/30 22:34:13 - mmengine - INFO - Iter(test) [ 3650/15160]    eta: 0:09:35  time: 0.0461  data_time: 0.0013  memory: 1339  
07/30 22:34:15 - mmengine - INFO - Iter(test) [ 3700/15160]    eta: 0:09:32  time: 0.0455  data_time: 0.0010  memory: 1339  
07/30 22:34:18 - mmengine - INFO - Iter(test) [ 3750/15160]    eta: 0:09:29  time: 0.0455  data_time: 0.0009  memory: 1339  
07/30 22:34:20 - mmengine - INFO - Iter(test) [ 3800/15160]    eta: 0:09:26  time: 0.0459  data_time: 0.0008  memory: 1339  
07/30 22:34:22 - mmengine - INFO - Iter(test) [ 3850/15160]    eta: 0:09:23  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 22:34:24 - mmengine - INFO - Iter(test) [ 3900/15160]    eta: 0:09:19  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 22:34:27 - mmengine - INFO - Iter(test) [ 3950/15160]    eta: 0:09:17  time: 0.0474  data_time: 0.0012  memory: 1339  
07/30 22:34:29 - mmengine - INFO - Iter(test) [ 4000/15160]    eta: 0:09:14  time: 0.0463  data_time: 0.0009  memory: 1339  
07/30 22:34:32 - mmengine - INFO - Iter(test) [ 4050/15160]    eta: 0:09:11  time: 0.0472  data_time: 0.0014  memory: 1339  
07/30 22:34:34 - mmengine - INFO - Iter(test) [ 4100/15160]    eta: 0:09:08  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 22:34:36 - mmengine - INFO - Iter(test) [ 4150/15160]    eta: 0:09:05  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 22:34:38 - mmengine - INFO - Iter(test) [ 4200/15160]    eta: 0:09:02  time: 0.0476  data_time: 0.0014  memory: 1339  
07/30 22:34:41 - mmengine - INFO - Iter(test) [ 4250/15160]    eta: 0:08:59  time: 0.0453  data_time: 0.0012  memory: 1339  
07/30 22:34:43 - mmengine - INFO - Iter(test) [ 4300/15160]    eta: 0:08:56  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 22:34:45 - mmengine - INFO - Iter(test) [ 4350/15160]    eta: 0:08:53  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 22:34:47 - mmengine - INFO - Iter(test) [ 4400/15160]    eta: 0:08:50  time: 0.0440  data_time: 0.0010  memory: 1339  
07/30 22:34:50 - mmengine - INFO - Iter(test) [ 4450/15160]    eta: 0:08:47  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 22:34:52 - mmengine - INFO - Iter(test) [ 4500/15160]    eta: 0:08:44  time: 0.0439  data_time: 0.0009  memory: 1339  
07/30 22:34:54 - mmengine - INFO - Iter(test) [ 4550/15160]    eta: 0:08:41  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 22:34:56 - mmengine - INFO - Iter(test) [ 4600/15160]    eta: 0:08:38  time: 0.0458  data_time: 0.0011  memory: 1339  
07/30 22:34:59 - mmengine - INFO - Iter(test) [ 4650/15160]    eta: 0:08:35  time: 0.0459  data_time: 0.0012  memory: 1339  
07/30 22:35:01 - mmengine - INFO - Iter(test) [ 4700/15160]    eta: 0:08:32  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:35:03 - mmengine - INFO - Iter(test) [ 4750/15160]    eta: 0:08:30  time: 0.0533  data_time: 0.0014  memory: 1339  
07/30 22:35:06 - mmengine - INFO - Iter(test) [ 4800/15160]    eta: 0:08:27  time: 0.0451  data_time: 0.0009  memory: 1339  
07/30 22:35:08 - mmengine - INFO - Iter(test) [ 4850/15160]    eta: 0:08:25  time: 0.0456  data_time: 0.0013  memory: 1339  
07/30 22:35:11 - mmengine - INFO - Iter(test) [ 4900/15160]    eta: 0:08:22  time: 0.0479  data_time: 0.0015  memory: 1339  
07/30 22:35:13 - mmengine - INFO - Iter(test) [ 4950/15160]    eta: 0:08:19  time: 0.0464  data_time: 0.0014  memory: 1339  
07/30 22:35:15 - mmengine - INFO - Iter(test) [ 5000/15160]    eta: 0:08:16  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 22:35:17 - mmengine - INFO - Iter(test) [ 5050/15160]    eta: 0:08:14  time: 0.0457  data_time: 0.0009  memory: 1339  
07/30 22:35:20 - mmengine - INFO - Iter(test) [ 5100/15160]    eta: 0:08:11  time: 0.0458  data_time: 0.0009  memory: 1339  
07/30 22:35:22 - mmengine - INFO - Iter(test) [ 5150/15160]    eta: 0:08:08  time: 0.0458  data_time: 0.0014  memory: 1339  
07/30 22:35:24 - mmengine - INFO - Iter(test) [ 5200/15160]    eta: 0:08:05  time: 0.0453  data_time: 0.0009  memory: 1339  
07/30 22:35:26 - mmengine - INFO - Iter(test) [ 5250/15160]    eta: 0:08:03  time: 0.0439  data_time: 0.0009  memory: 1339  
07/30 22:35:29 - mmengine - INFO - Iter(test) [ 5300/15160]    eta: 0:08:00  time: 0.0460  data_time: 0.0009  memory: 1339  
07/30 22:35:31 - mmengine - INFO - Iter(test) [ 5350/15160]    eta: 0:07:57  time: 0.0451  data_time: 0.0013  memory: 1339  
07/30 22:35:33 - mmengine - INFO - Iter(test) [ 5400/15160]    eta: 0:07:54  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:35:36 - mmengine - INFO - Iter(test) [ 5450/15160]    eta: 0:07:52  time: 0.0450  data_time: 0.0009  memory: 1339  
07/30 22:35:38 - mmengine - INFO - Iter(test) [ 5500/15160]    eta: 0:07:49  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 22:35:40 - mmengine - INFO - Iter(test) [ 5550/15160]    eta: 0:07:47  time: 0.0474  data_time: 0.0013  memory: 1339  
07/30 22:35:43 - mmengine - INFO - Iter(test) [ 5600/15160]    eta: 0:07:44  time: 0.0457  data_time: 0.0011  memory: 1339  
07/30 22:35:45 - mmengine - INFO - Iter(test) [ 5650/15160]    eta: 0:07:41  time: 0.0457  data_time: 0.0009  memory: 1339  
07/30 22:35:47 - mmengine - INFO - Iter(test) [ 5700/15160]    eta: 0:07:39  time: 0.0455  data_time: 0.0014  memory: 1339  
07/30 22:35:50 - mmengine - INFO - Iter(test) [ 5750/15160]    eta: 0:07:36  time: 0.0461  data_time: 0.0009  memory: 1339  
07/30 22:35:52 - mmengine - INFO - Iter(test) [ 5800/15160]    eta: 0:07:33  time: 0.0451  data_time: 0.0009  memory: 1339  
07/30 22:35:54 - mmengine - INFO - Iter(test) [ 5850/15160]    eta: 0:07:31  time: 0.0461  data_time: 0.0014  memory: 1339  
07/30 22:35:57 - mmengine - INFO - Iter(test) [ 5900/15160]    eta: 0:07:28  time: 0.0470  data_time: 0.0011  memory: 1339  
07/30 22:35:59 - mmengine - INFO - Iter(test) [ 5950/15160]    eta: 0:07:26  time: 0.0453  data_time: 0.0009  memory: 1339  
07/30 22:36:01 - mmengine - INFO - Iter(test) [ 6000/15160]    eta: 0:07:23  time: 0.0458  data_time: 0.0010  memory: 1339  
07/30 22:36:03 - mmengine - INFO - Iter(test) [ 6050/15160]    eta: 0:07:20  time: 0.0461  data_time: 0.0010  memory: 1339  
07/30 22:36:06 - mmengine - INFO - Iter(test) [ 6100/15160]    eta: 0:07:18  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 22:36:08 - mmengine - INFO - Iter(test) [ 6150/15160]    eta: 0:07:15  time: 0.0467  data_time: 0.0012  memory: 1339  
07/30 22:36:11 - mmengine - INFO - Iter(test) [ 6200/15160]    eta: 0:07:13  time: 0.0465  data_time: 0.0010  memory: 1339  
07/30 22:36:13 - mmengine - INFO - Iter(test) [ 6250/15160]    eta: 0:07:10  time: 0.0461  data_time: 0.0013  memory: 1339  
07/30 22:36:15 - mmengine - INFO - Iter(test) [ 6300/15160]    eta: 0:07:08  time: 0.0461  data_time: 0.0012  memory: 1339  
07/30 22:36:18 - mmengine - INFO - Iter(test) [ 6350/15160]    eta: 0:07:05  time: 0.0463  data_time: 0.0012  memory: 1339  
07/30 22:36:20 - mmengine - INFO - Iter(test) [ 6400/15160]    eta: 0:07:03  time: 0.0462  data_time: 0.0010  memory: 1339  
07/30 22:36:22 - mmengine - INFO - Iter(test) [ 6450/15160]    eta: 0:07:00  time: 0.0469  data_time: 0.0009  memory: 1339  
07/30 22:36:25 - mmengine - INFO - Iter(test) [ 6500/15160]    eta: 0:06:58  time: 0.0502  data_time: 0.0013  memory: 1339  
07/30 22:36:27 - mmengine - INFO - Iter(test) [ 6550/15160]    eta: 0:06:55  time: 0.0471  data_time: 0.0012  memory: 1339  
07/30 22:36:29 - mmengine - INFO - Iter(test) [ 6600/15160]    eta: 0:06:53  time: 0.0475  data_time: 0.0012  memory: 1339  
07/30 22:36:32 - mmengine - INFO - Iter(test) [ 6650/15160]    eta: 0:06:50  time: 0.0482  data_time: 0.0011  memory: 1339  
07/30 22:36:34 - mmengine - INFO - Iter(test) [ 6700/15160]    eta: 0:06:48  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 22:36:36 - mmengine - INFO - Iter(test) [ 6750/15160]    eta: 0:06:45  time: 0.0474  data_time: 0.0012  memory: 1339  
07/30 22:36:39 - mmengine - INFO - Iter(test) [ 6800/15160]    eta: 0:06:43  time: 0.0463  data_time: 0.0011  memory: 1339  
07/30 22:36:41 - mmengine - INFO - Iter(test) [ 6850/15160]    eta: 0:06:40  time: 0.0461  data_time: 0.0009  memory: 1339  
07/30 22:36:43 - mmengine - INFO - Iter(test) [ 6900/15160]    eta: 0:06:38  time: 0.0450  data_time: 0.0009  memory: 1339  
07/30 22:36:45 - mmengine - INFO - Iter(test) [ 6950/15160]    eta: 0:06:35  time: 0.0457  data_time: 0.0011  memory: 1339  
07/30 22:36:48 - mmengine - INFO - Iter(test) [ 7000/15160]    eta: 0:06:32  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 22:36:50 - mmengine - INFO - Iter(test) [ 7050/15160]    eta: 0:06:30  time: 0.0471  data_time: 0.0012  memory: 1339  
07/30 22:36:52 - mmengine - INFO - Iter(test) [ 7100/15160]    eta: 0:06:27  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 22:36:55 - mmengine - INFO - Iter(test) [ 7150/15160]    eta: 0:06:25  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 22:36:57 - mmengine - INFO - Iter(test) [ 7200/15160]    eta: 0:06:22  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:36:59 - mmengine - INFO - Iter(test) [ 7250/15160]    eta: 0:06:20  time: 0.0454  data_time: 0.0009  memory: 1339  
07/30 22:37:01 - mmengine - INFO - Iter(test) [ 7300/15160]    eta: 0:06:17  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:37:04 - mmengine - INFO - Iter(test) [ 7350/15160]    eta: 0:06:15  time: 0.0467  data_time: 0.0013  memory: 1339  
07/30 22:37:06 - mmengine - INFO - Iter(test) [ 7400/15160]    eta: 0:06:12  time: 0.0482  data_time: 0.0015  memory: 1339  
07/30 22:37:09 - mmengine - INFO - Iter(test) [ 7450/15160]    eta: 0:06:10  time: 0.0472  data_time: 0.0013  memory: 1339  
07/30 22:37:11 - mmengine - INFO - Iter(test) [ 7500/15160]    eta: 0:06:07  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:37:13 - mmengine - INFO - Iter(test) [ 7550/15160]    eta: 0:06:05  time: 0.0460  data_time: 0.0013  memory: 1339  
07/30 22:37:16 - mmengine - INFO - Iter(test) [ 7600/15160]    eta: 0:06:03  time: 0.0476  data_time: 0.0015  memory: 1339  
07/30 22:37:18 - mmengine - INFO - Iter(test) [ 7650/15160]    eta: 0:06:00  time: 0.0473  data_time: 0.0013  memory: 1339  
07/30 22:37:20 - mmengine - INFO - Iter(test) [ 7700/15160]    eta: 0:05:58  time: 0.0474  data_time: 0.0013  memory: 1339  
07/30 22:37:23 - mmengine - INFO - Iter(test) [ 7750/15160]    eta: 0:05:55  time: 0.0463  data_time: 0.0011  memory: 1339  
07/30 22:37:25 - mmengine - INFO - Iter(test) [ 7800/15160]    eta: 0:05:53  time: 0.0458  data_time: 0.0012  memory: 1339  
07/30 22:37:27 - mmengine - INFO - Iter(test) [ 7850/15160]    eta: 0:05:50  time: 0.0446  data_time: 0.0009  memory: 1339  
07/30 22:37:30 - mmengine - INFO - Iter(test) [ 7900/15160]    eta: 0:05:48  time: 0.0447  data_time: 0.0008  memory: 1339  
07/30 22:37:32 - mmengine - INFO - Iter(test) [ 7950/15160]    eta: 0:05:45  time: 0.0474  data_time: 0.0015  memory: 1339  
07/30 22:37:34 - mmengine - INFO - Iter(test) [ 8000/15160]    eta: 0:05:43  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 22:37:37 - mmengine - INFO - Iter(test) [ 8050/15160]    eta: 0:05:40  time: 0.0454  data_time: 0.0009  memory: 1339  
07/30 22:37:39 - mmengine - INFO - Iter(test) [ 8100/15160]    eta: 0:05:38  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 22:37:41 - mmengine - INFO - Iter(test) [ 8150/15160]    eta: 0:05:35  time: 0.0453  data_time: 0.0008  memory: 1339  
07/30 22:37:43 - mmengine - INFO - Iter(test) [ 8200/15160]    eta: 0:05:33  time: 0.0456  data_time: 0.0009  memory: 1339  
07/30 22:37:46 - mmengine - INFO - Iter(test) [ 8250/15160]    eta: 0:05:30  time: 0.0450  data_time: 0.0009  memory: 1339  
07/30 22:37:48 - mmengine - INFO - Iter(test) [ 8300/15160]    eta: 0:05:28  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:37:50 - mmengine - INFO - Iter(test) [ 8350/15160]    eta: 0:05:25  time: 0.0449  data_time: 0.0008  memory: 1339  
07/30 22:37:53 - mmengine - INFO - Iter(test) [ 8400/15160]    eta: 0:05:23  time: 0.0446  data_time: 0.0008  memory: 1339  
07/30 22:37:55 - mmengine - INFO - Iter(test) [ 8450/15160]    eta: 0:05:20  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 22:37:57 - mmengine - INFO - Iter(test) [ 8500/15160]    eta: 0:05:18  time: 0.0449  data_time: 0.0008  memory: 1339  
07/30 22:37:59 - mmengine - INFO - Iter(test) [ 8550/15160]    eta: 0:05:15  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 22:38:02 - mmengine - INFO - Iter(test) [ 8600/15160]    eta: 0:05:13  time: 0.0449  data_time: 0.0012  memory: 1339  
07/30 22:38:04 - mmengine - INFO - Iter(test) [ 8650/15160]    eta: 0:05:11  time: 0.0467  data_time: 0.0012  memory: 1339  
07/30 22:38:07 - mmengine - INFO - Iter(test) [ 8700/15160]    eta: 0:05:08  time: 0.0452  data_time: 0.0012  memory: 1339  
07/30 22:38:10 - mmengine - INFO - Iter(test) [ 8750/15160]    eta: 0:05:06  time: 0.0468  data_time: 0.0009  memory: 1339  
07/30 22:38:12 - mmengine - INFO - Iter(test) [ 8800/15160]    eta: 0:05:04  time: 0.0443  data_time: 0.0008  memory: 1339  
07/30 22:38:14 - mmengine - INFO - Iter(test) [ 8850/15160]    eta: 0:05:01  time: 0.0448  data_time: 0.0008  memory: 1339  
07/30 22:38:16 - mmengine - INFO - Iter(test) [ 8900/15160]    eta: 0:04:59  time: 0.0447  data_time: 0.0009  memory: 1339  
07/30 22:38:19 - mmengine - INFO - Iter(test) [ 8950/15160]    eta: 0:04:56  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 22:38:21 - mmengine - INFO - Iter(test) [ 9000/15160]    eta: 0:04:54  time: 0.0445  data_time: 0.0008  memory: 1339  
07/30 22:38:23 - mmengine - INFO - Iter(test) [ 9050/15160]    eta: 0:04:51  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 22:38:25 - mmengine - INFO - Iter(test) [ 9100/15160]    eta: 0:04:49  time: 0.0446  data_time: 0.0009  memory: 1339  
07/30 22:38:28 - mmengine - INFO - Iter(test) [ 9150/15160]    eta: 0:04:46  time: 0.0478  data_time: 0.0015  memory: 1339  
07/30 22:38:30 - mmengine - INFO - Iter(test) [ 9200/15160]    eta: 0:04:44  time: 0.0446  data_time: 0.0008  memory: 1339  
07/30 22:38:32 - mmengine - INFO - Iter(test) [ 9250/15160]    eta: 0:04:42  time: 0.0450  data_time: 0.0009  memory: 1339  
07/30 22:38:34 - mmengine - INFO - Iter(test) [ 9300/15160]    eta: 0:04:39  time: 0.0458  data_time: 0.0009  memory: 1339  
07/30 22:38:37 - mmengine - INFO - Iter(test) [ 9350/15160]    eta: 0:04:37  time: 0.0473  data_time: 0.0014  memory: 1339  
07/30 22:38:39 - mmengine - INFO - Iter(test) [ 9400/15160]    eta: 0:04:34  time: 0.0472  data_time: 0.0012  memory: 1339  
07/30 22:38:42 - mmengine - INFO - Iter(test) [ 9450/15160]    eta: 0:04:32  time: 0.0466  data_time: 0.0014  memory: 1339  
07/30 22:38:44 - mmengine - INFO - Iter(test) [ 9500/15160]    eta: 0:04:29  time: 0.0455  data_time: 0.0012  memory: 1339  
07/30 22:38:46 - mmengine - INFO - Iter(test) [ 9550/15160]    eta: 0:04:27  time: 0.0469  data_time: 0.0009  memory: 1339  
07/30 22:38:49 - mmengine - INFO - Iter(test) [ 9600/15160]    eta: 0:04:25  time: 0.0460  data_time: 0.0009  memory: 1339  
07/30 22:38:51 - mmengine - INFO - Iter(test) [ 9650/15160]    eta: 0:04:22  time: 0.0460  data_time: 0.0008  memory: 1339  
07/30 22:38:53 - mmengine - INFO - Iter(test) [ 9700/15160]    eta: 0:04:20  time: 0.0454  data_time: 0.0009  memory: 1339  
07/30 22:38:55 - mmengine - INFO - Iter(test) [ 9750/15160]    eta: 0:04:17  time: 0.0466  data_time: 0.0010  memory: 1339  
07/30 22:38:58 - mmengine - INFO - Iter(test) [ 9800/15160]    eta: 0:04:15  time: 0.0450  data_time: 0.0008  memory: 1339  
07/30 22:39:00 - mmengine - INFO - Iter(test) [ 9850/15160]    eta: 0:04:12  time: 0.0449  data_time: 0.0009  memory: 1339  
07/30 22:39:02 - mmengine - INFO - Iter(test) [ 9900/15160]    eta: 0:04:10  time: 0.0456  data_time: 0.0008  memory: 1339  
07/30 22:39:04 - mmengine - INFO - Iter(test) [ 9950/15160]    eta: 0:04:08  time: 0.0460  data_time: 0.0013  memory: 1339  
07/30 22:39:07 - mmengine - INFO - Iter(test) [10000/15160]    eta: 0:04:05  time: 0.0463  data_time: 0.0010  memory: 1339  
07/30 22:39:09 - mmengine - INFO - Iter(test) [10050/15160]    eta: 0:04:03  time: 0.0451  data_time: 0.0009  memory: 1339  
07/30 22:39:11 - mmengine - INFO - Iter(test) [10100/15160]    eta: 0:04:00  time: 0.0465  data_time: 0.0011  memory: 1339  
07/30 22:39:14 - mmengine - INFO - Iter(test) [10150/15160]    eta: 0:03:58  time: 0.0851  data_time: 0.0014  memory: 1339  
07/30 22:39:16 - mmengine - INFO - Iter(test) [10200/15160]    eta: 0:03:56  time: 0.0459  data_time: 0.0009  memory: 1339  
07/30 22:39:19 - mmengine - INFO - Iter(test) [10250/15160]    eta: 0:03:53  time: 0.0490  data_time: 0.0011  memory: 1339  
07/30 22:39:21 - mmengine - INFO - Iter(test) [10300/15160]    eta: 0:03:51  time: 0.0478  data_time: 0.0011  memory: 1339  
07/30 22:39:23 - mmengine - INFO - Iter(test) [10350/15160]    eta: 0:03:48  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 22:39:26 - mmengine - INFO - Iter(test) [10400/15160]    eta: 0:03:46  time: 0.0458  data_time: 0.0010  memory: 1339  
07/30 22:39:28 - mmengine - INFO - Iter(test) [10450/15160]    eta: 0:03:44  time: 0.0473  data_time: 0.0014  memory: 1339  
07/30 22:39:31 - mmengine - INFO - Iter(test) [10500/15160]    eta: 0:03:41  time: 0.0475  data_time: 0.0010  memory: 1339  
07/30 22:39:33 - mmengine - INFO - Iter(test) [10550/15160]    eta: 0:03:39  time: 0.0454  data_time: 0.0012  memory: 1339  
07/30 22:39:35 - mmengine - INFO - Iter(test) [10600/15160]    eta: 0:03:36  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:39:38 - mmengine - INFO - Iter(test) [10650/15160]    eta: 0:03:34  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 22:39:40 - mmengine - INFO - Iter(test) [10700/15160]    eta: 0:03:32  time: 0.0449  data_time: 0.0008  memory: 1339  
07/30 22:39:42 - mmengine - INFO - Iter(test) [10750/15160]    eta: 0:03:29  time: 0.0464  data_time: 0.0009  memory: 1339  
07/30 22:39:44 - mmengine - INFO - Iter(test) [10800/15160]    eta: 0:03:27  time: 0.0460  data_time: 0.0012  memory: 1339  
07/30 22:39:47 - mmengine - INFO - Iter(test) [10850/15160]    eta: 0:03:24  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 22:39:49 - mmengine - INFO - Iter(test) [10900/15160]    eta: 0:03:22  time: 0.0473  data_time: 0.0012  memory: 1339  
07/30 22:39:51 - mmengine - INFO - Iter(test) [10950/15160]    eta: 0:03:20  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:39:54 - mmengine - INFO - Iter(test) [11000/15160]    eta: 0:03:17  time: 0.0476  data_time: 0.0013  memory: 1339  
07/30 22:39:56 - mmengine - INFO - Iter(test) [11050/15160]    eta: 0:03:15  time: 0.0472  data_time: 0.0011  memory: 1339  
07/30 22:39:58 - mmengine - INFO - Iter(test) [11100/15160]    eta: 0:03:12  time: 0.0459  data_time: 0.0009  memory: 1339  
07/30 22:40:01 - mmengine - INFO - Iter(test) [11150/15160]    eta: 0:03:10  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 22:40:03 - mmengine - INFO - Iter(test) [11200/15160]    eta: 0:03:08  time: 0.0463  data_time: 0.0014  memory: 1339  
07/30 22:40:05 - mmengine - INFO - Iter(test) [11250/15160]    eta: 0:03:05  time: 0.0459  data_time: 0.0012  memory: 1339  
07/30 22:40:08 - mmengine - INFO - Iter(test) [11300/15160]    eta: 0:03:03  time: 0.0462  data_time: 0.0009  memory: 1339  
07/30 22:40:10 - mmengine - INFO - Iter(test) [11350/15160]    eta: 0:03:00  time: 0.0478  data_time: 0.0009  memory: 1339  
07/30 22:40:12 - mmengine - INFO - Iter(test) [11400/15160]    eta: 0:02:58  time: 0.0462  data_time: 0.0009  memory: 1339  
07/30 22:40:15 - mmengine - INFO - Iter(test) [11450/15160]    eta: 0:02:56  time: 0.0476  data_time: 0.0014  memory: 1339  
07/30 22:40:17 - mmengine - INFO - Iter(test) [11500/15160]    eta: 0:02:53  time: 0.0472  data_time: 0.0010  memory: 1339  
07/30 22:40:19 - mmengine - INFO - Iter(test) [11550/15160]    eta: 0:02:51  time: 0.0468  data_time: 0.0011  memory: 1339  
07/30 22:40:22 - mmengine - INFO - Iter(test) [11600/15160]    eta: 0:02:49  time: 0.0468  data_time: 0.0012  memory: 1339  
07/30 22:40:24 - mmengine - INFO - Iter(test) [11650/15160]    eta: 0:02:46  time: 0.0466  data_time: 0.0010  memory: 1339  
07/30 22:40:26 - mmengine - INFO - Iter(test) [11700/15160]    eta: 0:02:44  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 22:40:29 - mmengine - INFO - Iter(test) [11750/15160]    eta: 0:02:41  time: 0.0464  data_time: 0.0013  memory: 1339  
07/30 22:40:31 - mmengine - INFO - Iter(test) [11800/15160]    eta: 0:02:39  time: 0.0456  data_time: 0.0013  memory: 1339  
07/30 22:40:33 - mmengine - INFO - Iter(test) [11850/15160]    eta: 0:02:37  time: 0.0474  data_time: 0.0013  memory: 1339  
07/30 22:40:36 - mmengine - INFO - Iter(test) [11900/15160]    eta: 0:02:34  time: 0.0496  data_time: 0.0014  memory: 1339  
07/30 22:40:38 - mmengine - INFO - Iter(test) [11950/15160]    eta: 0:02:32  time: 0.0484  data_time: 0.0013  memory: 1339  
07/30 22:40:41 - mmengine - INFO - Iter(test) [12000/15160]    eta: 0:02:30  time: 0.0479  data_time: 0.0013  memory: 1339  
07/30 22:40:43 - mmengine - INFO - Iter(test) [12050/15160]    eta: 0:02:27  time: 0.0465  data_time: 0.0013  memory: 1339  
07/30 22:40:46 - mmengine - INFO - Iter(test) [12100/15160]    eta: 0:02:25  time: 0.0470  data_time: 0.0013  memory: 1339  
07/30 22:40:48 - mmengine - INFO - Iter(test) [12150/15160]    eta: 0:02:22  time: 0.0488  data_time: 0.0013  memory: 1339  
07/30 22:40:50 - mmengine - INFO - Iter(test) [12200/15160]    eta: 0:02:20  time: 0.0465  data_time: 0.0011  memory: 1339  
07/30 22:40:53 - mmengine - INFO - Iter(test) [12250/15160]    eta: 0:02:18  time: 0.0455  data_time: 0.0012  memory: 1339  
07/30 22:40:55 - mmengine - INFO - Iter(test) [12300/15160]    eta: 0:02:15  time: 0.0486  data_time: 0.0017  memory: 1339  
07/30 22:40:57 - mmengine - INFO - Iter(test) [12350/15160]    eta: 0:02:13  time: 0.0481  data_time: 0.0013  memory: 1339  
07/30 22:41:00 - mmengine - INFO - Iter(test) [12400/15160]    eta: 0:02:11  time: 0.0450  data_time: 0.0009  memory: 1339  
07/30 22:41:02 - mmengine - INFO - Iter(test) [12450/15160]    eta: 0:02:08  time: 0.0480  data_time: 0.0012  memory: 1339  
07/30 22:41:04 - mmengine - INFO - Iter(test) [12500/15160]    eta: 0:02:06  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 22:41:07 - mmengine - INFO - Iter(test) [12550/15160]    eta: 0:02:03  time: 0.0542  data_time: 0.0012  memory: 1339  
07/30 22:41:09 - mmengine - INFO - Iter(test) [12600/15160]    eta: 0:02:01  time: 0.0477  data_time: 0.0013  memory: 1339  
07/30 22:41:12 - mmengine - INFO - Iter(test) [12650/15160]    eta: 0:01:59  time: 0.0464  data_time: 0.0011  memory: 1339  
07/30 22:41:14 - mmengine - INFO - Iter(test) [12700/15160]    eta: 0:01:56  time: 0.0510  data_time: 0.0013  memory: 1339  
07/30 22:41:16 - mmengine - INFO - Iter(test) [12750/15160]    eta: 0:01:54  time: 0.0469  data_time: 0.0014  memory: 1339  
07/30 22:41:19 - mmengine - INFO - Iter(test) [12800/15160]    eta: 0:01:52  time: 0.0459  data_time: 0.0010  memory: 1339  
07/30 22:41:21 - mmengine - INFO - Iter(test) [12850/15160]    eta: 0:01:49  time: 0.0475  data_time: 0.0011  memory: 1339  
07/30 22:41:24 - mmengine - INFO - Iter(test) [12900/15160]    eta: 0:01:47  time: 0.0482  data_time: 0.0018  memory: 1339  
07/30 22:41:26 - mmengine - INFO - Iter(test) [12950/15160]    eta: 0:01:44  time: 0.0474  data_time: 0.0010  memory: 1339  
07/30 22:41:28 - mmengine - INFO - Iter(test) [13000/15160]    eta: 0:01:42  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 22:41:31 - mmengine - INFO - Iter(test) [13050/15160]    eta: 0:01:40  time: 0.0453  data_time: 0.0009  memory: 1339  
07/30 22:41:33 - mmengine - INFO - Iter(test) [13100/15160]    eta: 0:01:37  time: 0.0468  data_time: 0.0010  memory: 1339  
07/30 22:41:35 - mmengine - INFO - Iter(test) [13150/15160]    eta: 0:01:35  time: 0.0460  data_time: 0.0010  memory: 1339  
07/30 22:41:37 - mmengine - INFO - Iter(test) [13200/15160]    eta: 0:01:33  time: 0.0478  data_time: 0.0009  memory: 1339  
07/30 22:41:40 - mmengine - INFO - Iter(test) [13250/15160]    eta: 0:01:30  time: 0.0470  data_time: 0.0016  memory: 1339  
07/30 22:41:42 - mmengine - INFO - Iter(test) [13300/15160]    eta: 0:01:28  time: 0.0505  data_time: 0.0015  memory: 1339  
07/30 22:41:45 - mmengine - INFO - Iter(test) [13350/15160]    eta: 0:01:25  time: 0.0465  data_time: 0.0014  memory: 1339  
07/30 22:41:47 - mmengine - INFO - Iter(test) [13400/15160]    eta: 0:01:23  time: 0.0493  data_time: 0.0014  memory: 1339  
07/30 22:41:50 - mmengine - INFO - Iter(test) [13450/15160]    eta: 0:01:21  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 22:41:52 - mmengine - INFO - Iter(test) [13500/15160]    eta: 0:01:18  time: 0.0490  data_time: 0.0013  memory: 1339  
07/30 22:41:54 - mmengine - INFO - Iter(test) [13550/15160]    eta: 0:01:16  time: 0.0455  data_time: 0.0012  memory: 1339  
07/30 22:41:57 - mmengine - INFO - Iter(test) [13600/15160]    eta: 0:01:14  time: 0.0453  data_time: 0.0012  memory: 1339  
07/30 22:41:59 - mmengine - INFO - Iter(test) [13650/15160]    eta: 0:01:11  time: 0.0462  data_time: 0.0012  memory: 1339  
07/30 22:42:01 - mmengine - INFO - Iter(test) [13700/15160]    eta: 0:01:09  time: 0.0486  data_time: 0.0013  memory: 1339  
07/30 22:42:04 - mmengine - INFO - Iter(test) [13750/15160]    eta: 0:01:06  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 22:42:06 - mmengine - INFO - Iter(test) [13800/15160]    eta: 0:01:04  time: 0.0469  data_time: 0.0010  memory: 1339  
07/30 22:42:08 - mmengine - INFO - Iter(test) [13850/15160]    eta: 0:01:02  time: 0.0457  data_time: 0.0010  memory: 1339  
07/30 22:42:11 - mmengine - INFO - Iter(test) [13900/15160]    eta: 0:00:59  time: 0.0483  data_time: 0.0012  memory: 1339  
07/30 22:42:14 - mmengine - INFO - Iter(test) [13950/15160]    eta: 0:00:57  time: 0.0484  data_time: 0.0014  memory: 1339  
07/30 22:42:16 - mmengine - INFO - Iter(test) [14000/15160]    eta: 0:00:55  time: 0.0455  data_time: 0.0010  memory: 1339  
07/30 22:42:19 - mmengine - INFO - Iter(test) [14050/15160]    eta: 0:00:52  time: 0.0446  data_time: 0.0009  memory: 1339  
07/30 22:42:21 - mmengine - INFO - Iter(test) [14100/15160]    eta: 0:00:50  time: 0.0480  data_time: 0.0018  memory: 1339  
07/30 22:42:23 - mmengine - INFO - Iter(test) [14150/15160]    eta: 0:00:47  time: 0.0465  data_time: 0.0012  memory: 1339  
07/30 22:42:26 - mmengine - INFO - Iter(test) [14200/15160]    eta: 0:00:45  time: 0.0466  data_time: 0.0012  memory: 1339  
07/30 22:42:28 - mmengine - INFO - Iter(test) [14250/15160]    eta: 0:00:43  time: 0.0465  data_time: 0.0012  memory: 1339  
07/30 22:42:30 - mmengine - INFO - Iter(test) [14300/15160]    eta: 0:00:40  time: 0.0471  data_time: 0.0011  memory: 1339  
07/30 22:42:33 - mmengine - INFO - Iter(test) [14350/15160]    eta: 0:00:38  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 22:42:35 - mmengine - INFO - Iter(test) [14400/15160]    eta: 0:00:36  time: 0.0455  data_time: 0.0009  memory: 1339  
07/30 22:42:37 - mmengine - INFO - Iter(test) [14450/15160]    eta: 0:00:33  time: 0.0466  data_time: 0.0009  memory: 1339  
07/30 22:42:40 - mmengine - INFO - Iter(test) [14500/15160]    eta: 0:00:31  time: 0.0693  data_time: 0.0014  memory: 1339  
07/30 22:42:42 - mmengine - INFO - Iter(test) [14550/15160]    eta: 0:00:28  time: 0.0470  data_time: 0.0013  memory: 1339  
07/30 22:42:45 - mmengine - INFO - Iter(test) [14600/15160]    eta: 0:00:26  time: 0.0469  data_time: 0.0009  memory: 1339  
07/30 22:42:47 - mmengine - INFO - Iter(test) [14650/15160]    eta: 0:00:24  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 22:42:49 - mmengine - INFO - Iter(test) [14700/15160]    eta: 0:00:21  time: 0.0477  data_time: 0.0010  memory: 1339  
07/30 22:42:52 - mmengine - INFO - Iter(test) [14750/15160]    eta: 0:00:19  time: 0.0536  data_time: 0.0010  memory: 1339  
07/30 22:42:54 - mmengine - INFO - Iter(test) [14800/15160]    eta: 0:00:17  time: 0.0468  data_time: 0.0010  memory: 1339  
07/30 22:42:56 - mmengine - INFO - Iter(test) [14850/15160]    eta: 0:00:14  time: 0.0464  data_time: 0.0009  memory: 1339  
07/30 22:42:59 - mmengine - INFO - Iter(test) [14900/15160]    eta: 0:00:12  time: 0.0464  data_time: 0.0013  memory: 1339  
07/30 22:43:01 - mmengine - INFO - Iter(test) [14950/15160]    eta: 0:00:09  time: 0.0507  data_time: 0.0019  memory: 1339  
07/30 22:43:03 - mmengine - INFO - Iter(test) [15000/15160]    eta: 0:00:07  time: 0.0478  data_time: 0.0013  memory: 1339  
07/30 22:43:06 - mmengine - INFO - Iter(test) [15050/15160]    eta: 0:00:05  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 22:43:08 - mmengine - INFO - Iter(test) [15100/15160]    eta: 0:00:02  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 22:43:10 - mmengine - INFO - Iter(test) [15150/15160]    eta: 0:00:00  time: 0.0456  data_time: 0.0009  memory: 1339  
07/30 22:43:11 - mmengine - WARNING - IoUMetric got empty `self.results`. Please ensure that the processed results are properly added into `self.results` in `process` method.
[E ProcessGroupNCCL.cpp:737] [Rank 0] Watchdog caught collective operation timeout: WorkNCCL(SeqNum=8, OpType=ALLREDUCE, Timeout(ms)=1800000) ran for 1804666 milliseconds before timing out.
[E ProcessGroupNCCL.cpp:737] [Rank 1] Watchdog caught collective operation timeout: WorkNCCL(SeqNum=8, OpType=ALLREDUCE, Timeout(ms)=1800000) ran for 1804684 milliseconds before timing out.
Traceback (most recent call last):
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 123, in <module>
    main()
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 119, in main
    runner.test()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 1781, in test
[E ProcessGroupNCCL.cpp:414] Some NCCL operations have failed or timed out. Due to the asynchronous nature of CUDA kernels, subsequent GPU operations might run on corrupted/incomplete data. To avoid this inconsistency, we are taking the entire process down.
[E ProcessGroupNCCL.cpp:414] Some NCCL operations have failed or timed out. Due to the asynchronous nature of CUDA kernels, subsequent GPU operations might run on corrupted/incomplete data. To avoid this inconsistency, we are taking the entire process down.
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 20948 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 20949 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: -6) local_rank: 0 (pid: 20946) of binary: /home/jaehyunkang/anaconda3/envs/mmseg3/bin/python
Traceback (most recent call last):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
======================================================
tools/test.py FAILED
------------------------------------------------------
Failures:
[1]:
  time      : 2023-07-30_23:13:20
  host      : node05.localdomain
  rank      : 1 (local_rank: 1)
  exitcode  : -6 (pid: 20947)
  error_file: <N/A>
  traceback : Signal 6 (SIGABRT) received by PID 20947
------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-07-30_23:13:20
  host      : node05.localdomain
  rank      : 0 (local_rank: 0)
  exitcode  : -6 (pid: 20946)
  error_file: <N/A>
  traceback : Signal 6 (SIGABRT) received by PID 20946
======================================================
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[W socket.cpp:401] [c10d] The server socket cannot be initialized on [::]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29501 (errno: 97 - Address family not supported by protocol).
07/30 23:13:28 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.17 (main, Jul  5 2023, 20:41:20) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 777
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /opt/ohpc/pub/apps/cuda/11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 777
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

07/30 23:13:28 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[
        87.33,
        91.29,
        83.01,
    ],
    std=[
        43.75,
        38.6,
        35.43,
    ],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[
            87.33,
            91.29,
            83.01,
        ],
        std=[
            43.75,
            38.6,
            35.43,
        ],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        )),
    pretrained='open-mmlab://resnest101',
    backbone=dict(
        type='ResNeSt',
        depth=101,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        dilations=(
            1,
            1,
            2,
            4,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        stem_channels=128,
        radix=2,
        reduction_factor=4,
        avg_down_stride=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss',
                loss_name='loss_ce',
                use_sigmoid=False,
                loss_weight=1.0),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=1.0),
        ]),
    auxiliary_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss', loss_name='loss_ce', loss_weight=0.4),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=0.4),
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'SatelliteDataset'
data_root = '../datasets/Satellite'
crop_size = (
    256,
    256,
)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='RandomCrop', crop_size=(
        256,
        256,
    )),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='PackSegInputs'),
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[
            [
                dict(type='Resize', scale_factor=0.5, keep_ratio=True),
                dict(type='Resize', scale_factor=0.75, keep_ratio=True),
                dict(type='Resize', scale_factor=1.0, keep_ratio=True),
                dict(type='Resize', scale_factor=1.25, keep_ratio=True),
                dict(type='Resize', scale_factor=1.5, keep_ratio=True),
                dict(type='Resize', scale_factor=1.75, keep_ratio=True),
            ],
            [
                dict(type='RandomFlip', prob=0.0, direction='horizontal'),
                dict(type='RandomFlip', prob=1.0, direction='horizontal'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ]),
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/train_1', seg_map_path='ann_dir/train_1'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='RandomCrop', crop_size=(
                256,
                256,
            )),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs'),
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/val_slice_1',
            seg_map_path='ann_dir/val_slice_1'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='PackSegInputs'),
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(img_path='img_dir/test'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='PackSegInputs'),
        ]))
val_evaluator = dict(
    type='IoUMetric', iou_metrics=[
        'mIoU',
        'mDice',
    ])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=[
        'mIoU',
    ],
    format_only=True,
    output_dir=
    'mask_inference_result/resnest_deeplabv3plus_fold1/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '../model_weights/resnest_deeplabv3plus_fold1.pth'
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(
    type='AdamW', lr=0.0001, betas=(
        0.9,
        0.999,
    ), weight_decay=0.005)
optim_wrapper = dict(
    type='AmpOptimWrapper',
    optimizer=dict(
        type='AdamW', lr=0.0001, betas=(
            0.9,
            0.999,
        ), weight_decay=0.005),
    clip_grad=None,
    loss_scale='dynamic')
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-06,
        power=1.0,
        begin=0,
        end=100000,
        by_epoch=False),
]
train_cfg = dict(
    type='IterBasedTrainLoop', max_iters=100000, val_interval=10000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook', draw=True, interval=1000))
test_img_size = (
    512,
    512,
)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='PackSegInputs'),
]
randomness = dict(seed=777)
launcher = 'pytorch'
work_dir = '_satellite/resnest_deeplabv3plus_fold1'

/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
07/30 23:13:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
07/30 23:13:33 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold1.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold1.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold1.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold1.pth
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
07/30 23:13:35 - mmengine - INFO - Load checkpoint from ../model_weights/resnest_deeplabv3plus_fold1.pth
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
07/30 23:13:36 - mmengine - INFO - resumed epoch: 0, iter: 100000
07/30 23:13:53 - mmengine - INFO - Iter(test) [   50/15160]    eta: 1:22:26  time: 0.0452  data_time: 0.0012  memory: 9586  
07/30 23:13:55 - mmengine - INFO - Iter(test) [  100/15160]    eta: 0:46:47  time: 0.0455  data_time: 0.0012  memory: 1339  
07/30 23:13:57 - mmengine - INFO - Iter(test) [  150/15160]    eta: 0:34:50  time: 0.0445  data_time: 0.0012  memory: 1339  
07/30 23:13:59 - mmengine - INFO - Iter(test) [  200/15160]    eta: 0:28:51  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:14:02 - mmengine - INFO - Iter(test) [  250/15160]    eta: 0:25:13  time: 0.0447  data_time: 0.0012  memory: 1339  
07/30 23:14:04 - mmengine - INFO - Iter(test) [  300/15160]    eta: 0:22:49  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:14:06 - mmengine - INFO - Iter(test) [  350/15160]    eta: 0:21:09  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:14:08 - mmengine - INFO - Iter(test) [  400/15160]    eta: 0:19:51  time: 0.0467  data_time: 0.0011  memory: 1339  
07/30 23:14:11 - mmengine - INFO - Iter(test) [  450/15160]    eta: 0:18:49  time: 0.0461  data_time: 0.0012  memory: 1339  
07/30 23:14:13 - mmengine - INFO - Iter(test) [  500/15160]    eta: 0:17:59  time: 0.0443  data_time: 0.0011  memory: 1339  
07/30 23:14:15 - mmengine - INFO - Iter(test) [  550/15160]    eta: 0:17:17  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:14:17 - mmengine - INFO - Iter(test) [  600/15160]    eta: 0:16:42  time: 0.0446  data_time: 0.0011  memory: 1339  
07/30 23:14:20 - mmengine - INFO - Iter(test) [  650/15160]    eta: 0:16:12  time: 0.0443  data_time: 0.0011  memory: 1339  
07/30 23:14:22 - mmengine - INFO - Iter(test) [  700/15160]    eta: 0:15:46  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:14:24 - mmengine - INFO - Iter(test) [  750/15160]    eta: 0:15:23  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:14:27 - mmengine - INFO - Iter(test) [  800/15160]    eta: 0:15:03  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:14:29 - mmengine - INFO - Iter(test) [  850/15160]    eta: 0:14:45  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:14:31 - mmengine - INFO - Iter(test) [  900/15160]    eta: 0:14:29  time: 0.0447  data_time: 0.0012  memory: 1339  
07/30 23:14:33 - mmengine - INFO - Iter(test) [  950/15160]    eta: 0:14:14  time: 0.0452  data_time: 0.0012  memory: 1339  
07/30 23:14:36 - mmengine - INFO - Iter(test) [ 1000/15160]    eta: 0:14:06  time: 0.0779  data_time: 0.0011  memory: 1339  
07/30 23:14:38 - mmengine - INFO - Iter(test) [ 1050/15160]    eta: 0:13:54  time: 0.0458  data_time: 0.0012  memory: 1339  
07/30 23:14:41 - mmengine - INFO - Iter(test) [ 1100/15160]    eta: 0:13:42  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:14:44 - mmengine - INFO - Iter(test) [ 1150/15160]    eta: 0:13:42  time: 0.1335  data_time: 0.0013  memory: 1339  
07/30 23:14:46 - mmengine - INFO - Iter(test) [ 1200/15160]    eta: 0:13:31  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:14:48 - mmengine - INFO - Iter(test) [ 1250/15160]    eta: 0:13:21  time: 0.0470  data_time: 0.0012  memory: 1339  
07/30 23:14:50 - mmengine - INFO - Iter(test) [ 1300/15160]    eta: 0:13:11  time: 0.0443  data_time: 0.0011  memory: 1339  
07/30 23:14:53 - mmengine - INFO - Iter(test) [ 1350/15160]    eta: 0:13:02  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:14:55 - mmengine - INFO - Iter(test) [ 1400/15160]    eta: 0:12:53  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:14:57 - mmengine - INFO - Iter(test) [ 1450/15160]    eta: 0:12:45  time: 0.0443  data_time: 0.0011  memory: 1339  
07/30 23:14:59 - mmengine - INFO - Iter(test) [ 1500/15160]    eta: 0:12:37  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:15:02 - mmengine - INFO - Iter(test) [ 1550/15160]    eta: 0:12:29  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:15:04 - mmengine - INFO - Iter(test) [ 1600/15160]    eta: 0:12:22  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:15:06 - mmengine - INFO - Iter(test) [ 1650/15160]    eta: 0:12:15  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:15:08 - mmengine - INFO - Iter(test) [ 1700/15160]    eta: 0:12:09  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:15:11 - mmengine - INFO - Iter(test) [ 1750/15160]    eta: 0:12:02  time: 0.0440  data_time: 0.0010  memory: 1339  
07/30 23:15:13 - mmengine - INFO - Iter(test) [ 1800/15160]    eta: 0:11:56  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:15:15 - mmengine - INFO - Iter(test) [ 1850/15160]    eta: 0:11:50  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:15:17 - mmengine - INFO - Iter(test) [ 1900/15160]    eta: 0:11:45  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:15:20 - mmengine - INFO - Iter(test) [ 1950/15160]    eta: 0:11:39  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 23:15:22 - mmengine - INFO - Iter(test) [ 2000/15160]    eta: 0:11:34  time: 0.0454  data_time: 0.0011  memory: 1339  
07/30 23:15:24 - mmengine - INFO - Iter(test) [ 2050/15160]    eta: 0:11:29  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:15:26 - mmengine - INFO - Iter(test) [ 2100/15160]    eta: 0:11:24  time: 0.0449  data_time: 0.0011  memory: 1339  
07/30 23:15:29 - mmengine - INFO - Iter(test) [ 2150/15160]    eta: 0:11:19  time: 0.0448  data_time: 0.0011  memory: 1339  
07/30 23:15:31 - mmengine - INFO - Iter(test) [ 2200/15160]    eta: 0:11:14  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:15:33 - mmengine - INFO - Iter(test) [ 2250/15160]    eta: 0:11:10  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:15:35 - mmengine - INFO - Iter(test) [ 2300/15160]    eta: 0:11:05  time: 0.0525  data_time: 0.0011  memory: 1339  
07/30 23:15:38 - mmengine - INFO - Iter(test) [ 2350/15160]    eta: 0:11:01  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:15:40 - mmengine - INFO - Iter(test) [ 2400/15160]    eta: 0:10:57  time: 0.0454  data_time: 0.0011  memory: 1339  
07/30 23:15:42 - mmengine - INFO - Iter(test) [ 2450/15160]    eta: 0:10:52  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:15:45 - mmengine - INFO - Iter(test) [ 2500/15160]    eta: 0:10:52  time: 0.0446  data_time: 0.0011  memory: 1339  
07/30 23:15:47 - mmengine - INFO - Iter(test) [ 2550/15160]    eta: 0:10:48  time: 0.0449  data_time: 0.0012  memory: 1339  
07/30 23:15:50 - mmengine - INFO - Iter(test) [ 2600/15160]    eta: 0:10:43  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:15:52 - mmengine - INFO - Iter(test) [ 2650/15160]    eta: 0:10:39  time: 0.0462  data_time: 0.0012  memory: 1339  
07/30 23:15:54 - mmengine - INFO - Iter(test) [ 2700/15160]    eta: 0:10:36  time: 0.0511  data_time: 0.0010  memory: 1339  
07/30 23:15:56 - mmengine - INFO - Iter(test) [ 2750/15160]    eta: 0:10:32  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:15:59 - mmengine - INFO - Iter(test) [ 2800/15160]    eta: 0:10:28  time: 0.0448  data_time: 0.0012  memory: 1339  
07/30 23:16:01 - mmengine - INFO - Iter(test) [ 2850/15160]    eta: 0:10:25  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:16:03 - mmengine - INFO - Iter(test) [ 2900/15160]    eta: 0:10:21  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:16:05 - mmengine - INFO - Iter(test) [ 2950/15160]    eta: 0:10:17  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:16:08 - mmengine - INFO - Iter(test) [ 3000/15160]    eta: 0:10:14  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:16:10 - mmengine - INFO - Iter(test) [ 3050/15160]    eta: 0:10:11  time: 0.0454  data_time: 0.0011  memory: 1339  
07/30 23:16:12 - mmengine - INFO - Iter(test) [ 3100/15160]    eta: 0:10:07  time: 0.0448  data_time: 0.0011  memory: 1339  
07/30 23:16:15 - mmengine - INFO - Iter(test) [ 3150/15160]    eta: 0:10:03  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:16:17 - mmengine - INFO - Iter(test) [ 3200/15160]    eta: 0:10:00  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:16:19 - mmengine - INFO - Iter(test) [ 3250/15160]    eta: 0:09:57  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:16:22 - mmengine - INFO - Iter(test) [ 3300/15160]    eta: 0:09:53  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:16:24 - mmengine - INFO - Iter(test) [ 3350/15160]    eta: 0:09:50  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:16:26 - mmengine - INFO - Iter(test) [ 3400/15160]    eta: 0:09:47  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:16:28 - mmengine - INFO - Iter(test) [ 3450/15160]    eta: 0:09:43  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:16:30 - mmengine - INFO - Iter(test) [ 3500/15160]    eta: 0:09:40  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:16:33 - mmengine - INFO - Iter(test) [ 3550/15160]    eta: 0:09:37  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:16:35 - mmengine - INFO - Iter(test) [ 3600/15160]    eta: 0:09:33  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:16:37 - mmengine - INFO - Iter(test) [ 3650/15160]    eta: 0:09:30  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:16:39 - mmengine - INFO - Iter(test) [ 3700/15160]    eta: 0:09:27  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:16:42 - mmengine - INFO - Iter(test) [ 3750/15160]    eta: 0:09:24  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 23:16:44 - mmengine - INFO - Iter(test) [ 3800/15160]    eta: 0:09:20  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:16:46 - mmengine - INFO - Iter(test) [ 3850/15160]    eta: 0:09:17  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 23:16:48 - mmengine - INFO - Iter(test) [ 3900/15160]    eta: 0:09:14  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:16:51 - mmengine - INFO - Iter(test) [ 3950/15160]    eta: 0:09:11  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:16:53 - mmengine - INFO - Iter(test) [ 4000/15160]    eta: 0:09:08  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:16:55 - mmengine - INFO - Iter(test) [ 4050/15160]    eta: 0:09:05  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:16:57 - mmengine - INFO - Iter(test) [ 4100/15160]    eta: 0:09:02  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:17:00 - mmengine - INFO - Iter(test) [ 4150/15160]    eta: 0:08:59  time: 0.0452  data_time: 0.0011  memory: 1339  
07/30 23:17:02 - mmengine - INFO - Iter(test) [ 4200/15160]    eta: 0:08:56  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:17:04 - mmengine - INFO - Iter(test) [ 4250/15160]    eta: 0:08:53  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 23:17:07 - mmengine - INFO - Iter(test) [ 4300/15160]    eta: 0:08:50  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:17:09 - mmengine - INFO - Iter(test) [ 4350/15160]    eta: 0:08:47  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 23:17:11 - mmengine - INFO - Iter(test) [ 4400/15160]    eta: 0:08:45  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 23:17:13 - mmengine - INFO - Iter(test) [ 4450/15160]    eta: 0:08:42  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:17:16 - mmengine - INFO - Iter(test) [ 4500/15160]    eta: 0:08:39  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:17:18 - mmengine - INFO - Iter(test) [ 4550/15160]    eta: 0:08:36  time: 0.0478  data_time: 0.0012  memory: 1339  
07/30 23:17:20 - mmengine - INFO - Iter(test) [ 4600/15160]    eta: 0:08:34  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:17:23 - mmengine - INFO - Iter(test) [ 4650/15160]    eta: 0:08:31  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:17:25 - mmengine - INFO - Iter(test) [ 4700/15160]    eta: 0:08:28  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:17:27 - mmengine - INFO - Iter(test) [ 4750/15160]    eta: 0:08:25  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:17:29 - mmengine - INFO - Iter(test) [ 4800/15160]    eta: 0:08:22  time: 0.0457  data_time: 0.0011  memory: 1339  
07/30 23:17:32 - mmengine - INFO - Iter(test) [ 4850/15160]    eta: 0:08:19  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 23:17:34 - mmengine - INFO - Iter(test) [ 4900/15160]    eta: 0:08:17  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:17:36 - mmengine - INFO - Iter(test) [ 4950/15160]    eta: 0:08:14  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 23:17:39 - mmengine - INFO - Iter(test) [ 5000/15160]    eta: 0:08:12  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:17:41 - mmengine - INFO - Iter(test) [ 5050/15160]    eta: 0:08:09  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 23:17:43 - mmengine - INFO - Iter(test) [ 5100/15160]    eta: 0:08:06  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:17:45 - mmengine - INFO - Iter(test) [ 5150/15160]    eta: 0:08:03  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:17:48 - mmengine - INFO - Iter(test) [ 5200/15160]    eta: 0:08:01  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:17:50 - mmengine - INFO - Iter(test) [ 5250/15160]    eta: 0:07:58  time: 0.0462  data_time: 0.0010  memory: 1339  
07/30 23:17:52 - mmengine - INFO - Iter(test) [ 5300/15160]    eta: 0:07:55  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:17:54 - mmengine - INFO - Iter(test) [ 5350/15160]    eta: 0:07:53  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:17:57 - mmengine - INFO - Iter(test) [ 5400/15160]    eta: 0:07:50  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:17:59 - mmengine - INFO - Iter(test) [ 5450/15160]    eta: 0:07:47  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:18:01 - mmengine - INFO - Iter(test) [ 5500/15160]    eta: 0:07:45  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:18:04 - mmengine - INFO - Iter(test) [ 5550/15160]    eta: 0:07:42  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:18:06 - mmengine - INFO - Iter(test) [ 5600/15160]    eta: 0:07:39  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:18:08 - mmengine - INFO - Iter(test) [ 5650/15160]    eta: 0:07:37  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:18:10 - mmengine - INFO - Iter(test) [ 5700/15160]    eta: 0:07:34  time: 0.0463  data_time: 0.0010  memory: 1339  
07/30 23:18:13 - mmengine - INFO - Iter(test) [ 5750/15160]    eta: 0:07:31  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:18:15 - mmengine - INFO - Iter(test) [ 5800/15160]    eta: 0:07:29  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:18:17 - mmengine - INFO - Iter(test) [ 5850/15160]    eta: 0:07:26  time: 0.0454  data_time: 0.0011  memory: 1339  
07/30 23:18:19 - mmengine - INFO - Iter(test) [ 5900/15160]    eta: 0:07:24  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:18:22 - mmengine - INFO - Iter(test) [ 5950/15160]    eta: 0:07:21  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:18:24 - mmengine - INFO - Iter(test) [ 6000/15160]    eta: 0:07:18  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:18:26 - mmengine - INFO - Iter(test) [ 6050/15160]    eta: 0:07:16  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:18:29 - mmengine - INFO - Iter(test) [ 6100/15160]    eta: 0:07:13  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 23:18:31 - mmengine - INFO - Iter(test) [ 6150/15160]    eta: 0:07:11  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:18:33 - mmengine - INFO - Iter(test) [ 6200/15160]    eta: 0:07:08  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:18:35 - mmengine - INFO - Iter(test) [ 6250/15160]    eta: 0:07:06  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:18:38 - mmengine - INFO - Iter(test) [ 6300/15160]    eta: 0:07:03  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:18:40 - mmengine - INFO - Iter(test) [ 6350/15160]    eta: 0:07:00  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:18:42 - mmengine - INFO - Iter(test) [ 6400/15160]    eta: 0:06:58  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:18:44 - mmengine - INFO - Iter(test) [ 6450/15160]    eta: 0:06:55  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:18:47 - mmengine - INFO - Iter(test) [ 6500/15160]    eta: 0:06:53  time: 0.0465  data_time: 0.0010  memory: 1339  
07/30 23:18:49 - mmengine - INFO - Iter(test) [ 6550/15160]    eta: 0:06:50  time: 0.0459  data_time: 0.0010  memory: 1339  
07/30 23:18:51 - mmengine - INFO - Iter(test) [ 6600/15160]    eta: 0:06:48  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 23:18:53 - mmengine - INFO - Iter(test) [ 6650/15160]    eta: 0:06:45  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:18:56 - mmengine - INFO - Iter(test) [ 6700/15160]    eta: 0:06:43  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 23:18:58 - mmengine - INFO - Iter(test) [ 6750/15160]    eta: 0:06:40  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 23:19:00 - mmengine - INFO - Iter(test) [ 6800/15160]    eta: 0:06:38  time: 0.0457  data_time: 0.0010  memory: 1339  
07/30 23:19:03 - mmengine - INFO - Iter(test) [ 6850/15160]    eta: 0:06:35  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:19:05 - mmengine - INFO - Iter(test) [ 6900/15160]    eta: 0:06:32  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 23:19:07 - mmengine - INFO - Iter(test) [ 6950/15160]    eta: 0:06:30  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:19:09 - mmengine - INFO - Iter(test) [ 7000/15160]    eta: 0:06:27  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 23:19:12 - mmengine - INFO - Iter(test) [ 7050/15160]    eta: 0:06:25  time: 0.0452  data_time: 0.0011  memory: 1339  
07/30 23:19:14 - mmengine - INFO - Iter(test) [ 7100/15160]    eta: 0:06:23  time: 0.0457  data_time: 0.0011  memory: 1339  
07/30 23:19:16 - mmengine - INFO - Iter(test) [ 7150/15160]    eta: 0:06:20  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:19:18 - mmengine - INFO - Iter(test) [ 7200/15160]    eta: 0:06:18  time: 0.0455  data_time: 0.0010  memory: 1339  
07/30 23:19:21 - mmengine - INFO - Iter(test) [ 7250/15160]    eta: 0:06:15  time: 0.0467  data_time: 0.0012  memory: 1339  
07/30 23:19:23 - mmengine - INFO - Iter(test) [ 7300/15160]    eta: 0:06:13  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 23:19:25 - mmengine - INFO - Iter(test) [ 7350/15160]    eta: 0:06:10  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:19:27 - mmengine - INFO - Iter(test) [ 7400/15160]    eta: 0:06:07  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:19:30 - mmengine - INFO - Iter(test) [ 7450/15160]    eta: 0:06:05  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:19:32 - mmengine - INFO - Iter(test) [ 7500/15160]    eta: 0:06:02  time: 0.0448  data_time: 0.0012  memory: 1339  
07/30 23:19:34 - mmengine - INFO - Iter(test) [ 7550/15160]    eta: 0:06:00  time: 0.0460  data_time: 0.0011  memory: 1339  
07/30 23:19:36 - mmengine - INFO - Iter(test) [ 7600/15160]    eta: 0:05:57  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:19:39 - mmengine - INFO - Iter(test) [ 7650/15160]    eta: 0:05:55  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:19:41 - mmengine - INFO - Iter(test) [ 7700/15160]    eta: 0:05:52  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:19:43 - mmengine - INFO - Iter(test) [ 7750/15160]    eta: 0:05:50  time: 0.0449  data_time: 0.0011  memory: 1339  
07/30 23:19:45 - mmengine - INFO - Iter(test) [ 7800/15160]    eta: 0:05:48  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:19:48 - mmengine - INFO - Iter(test) [ 7850/15160]    eta: 0:05:45  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:19:50 - mmengine - INFO - Iter(test) [ 7900/15160]    eta: 0:05:43  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:19:52 - mmengine - INFO - Iter(test) [ 7950/15160]    eta: 0:05:40  time: 0.0454  data_time: 0.0011  memory: 1339  
07/30 23:19:54 - mmengine - INFO - Iter(test) [ 8000/15160]    eta: 0:05:38  time: 0.0462  data_time: 0.0011  memory: 1339  
07/30 23:19:57 - mmengine - INFO - Iter(test) [ 8050/15160]    eta: 0:05:35  time: 0.0470  data_time: 0.0011  memory: 1339  
07/30 23:19:59 - mmengine - INFO - Iter(test) [ 8100/15160]    eta: 0:05:33  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:20:01 - mmengine - INFO - Iter(test) [ 8150/15160]    eta: 0:05:30  time: 0.0460  data_time: 0.0010  memory: 1339  
07/30 23:20:04 - mmengine - INFO - Iter(test) [ 8200/15160]    eta: 0:05:28  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:20:06 - mmengine - INFO - Iter(test) [ 8250/15160]    eta: 0:05:26  time: 0.0449  data_time: 0.0011  memory: 1339  
07/30 23:20:08 - mmengine - INFO - Iter(test) [ 8300/15160]    eta: 0:05:23  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:20:10 - mmengine - INFO - Iter(test) [ 8350/15160]    eta: 0:05:21  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:20:13 - mmengine - INFO - Iter(test) [ 8400/15160]    eta: 0:05:18  time: 0.0462  data_time: 0.0011  memory: 1339  
07/30 23:20:15 - mmengine - INFO - Iter(test) [ 8450/15160]    eta: 0:05:16  time: 0.0462  data_time: 0.0011  memory: 1339  
07/30 23:20:17 - mmengine - INFO - Iter(test) [ 8500/15160]    eta: 0:05:14  time: 0.0466  data_time: 0.0011  memory: 1339  
07/30 23:20:20 - mmengine - INFO - Iter(test) [ 8550/15160]    eta: 0:05:11  time: 0.0452  data_time: 0.0011  memory: 1339  
07/30 23:20:22 - mmengine - INFO - Iter(test) [ 8600/15160]    eta: 0:05:09  time: 0.0458  data_time: 0.0011  memory: 1339  
07/30 23:20:24 - mmengine - INFO - Iter(test) [ 8650/15160]    eta: 0:05:06  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:20:27 - mmengine - INFO - Iter(test) [ 8700/15160]    eta: 0:05:04  time: 0.0462  data_time: 0.0011  memory: 1339  
07/30 23:20:29 - mmengine - INFO - Iter(test) [ 8750/15160]    eta: 0:05:02  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 23:20:31 - mmengine - INFO - Iter(test) [ 8800/15160]    eta: 0:04:59  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:20:33 - mmengine - INFO - Iter(test) [ 8850/15160]    eta: 0:04:57  time: 0.0445  data_time: 0.0011  memory: 1339  
07/30 23:20:36 - mmengine - INFO - Iter(test) [ 8900/15160]    eta: 0:04:54  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:20:38 - mmengine - INFO - Iter(test) [ 8950/15160]    eta: 0:04:52  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:20:40 - mmengine - INFO - Iter(test) [ 9000/15160]    eta: 0:04:49  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:20:43 - mmengine - INFO - Iter(test) [ 9050/15160]    eta: 0:04:47  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:20:45 - mmengine - INFO - Iter(test) [ 9100/15160]    eta: 0:04:45  time: 0.0490  data_time: 0.0011  memory: 1339  
07/30 23:20:47 - mmengine - INFO - Iter(test) [ 9150/15160]    eta: 0:04:42  time: 0.0459  data_time: 0.0011  memory: 1339  
07/30 23:20:49 - mmengine - INFO - Iter(test) [ 9200/15160]    eta: 0:04:40  time: 0.0462  data_time: 0.0011  memory: 1339  
07/30 23:20:52 - mmengine - INFO - Iter(test) [ 9250/15160]    eta: 0:04:38  time: 0.0483  data_time: 0.0011  memory: 1339  
07/30 23:20:54 - mmengine - INFO - Iter(test) [ 9300/15160]    eta: 0:04:35  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:20:56 - mmengine - INFO - Iter(test) [ 9350/15160]    eta: 0:04:33  time: 0.0465  data_time: 0.0011  memory: 1339  
07/30 23:20:59 - mmengine - INFO - Iter(test) [ 9400/15160]    eta: 0:04:30  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:21:01 - mmengine - INFO - Iter(test) [ 9450/15160]    eta: 0:04:28  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:21:03 - mmengine - INFO - Iter(test) [ 9500/15160]    eta: 0:04:26  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:21:05 - mmengine - INFO - Iter(test) [ 9550/15160]    eta: 0:04:23  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:21:08 - mmengine - INFO - Iter(test) [ 9600/15160]    eta: 0:04:21  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 23:21:10 - mmengine - INFO - Iter(test) [ 9650/15160]    eta: 0:04:18  time: 0.0449  data_time: 0.0011  memory: 1339  
07/30 23:21:13 - mmengine - INFO - Iter(test) [ 9700/15160]    eta: 0:04:16  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:21:15 - mmengine - INFO - Iter(test) [ 9750/15160]    eta: 0:04:14  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 23:21:17 - mmengine - INFO - Iter(test) [ 9800/15160]    eta: 0:04:11  time: 0.0487  data_time: 0.0011  memory: 1339  
07/30 23:21:19 - mmengine - INFO - Iter(test) [ 9850/15160]    eta: 0:04:09  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:21:22 - mmengine - INFO - Iter(test) [ 9900/15160]    eta: 0:04:07  time: 0.0444  data_time: 0.0011  memory: 1339  
07/30 23:21:24 - mmengine - INFO - Iter(test) [ 9950/15160]    eta: 0:04:04  time: 0.0461  data_time: 0.0011  memory: 1339  
07/30 23:21:26 - mmengine - INFO - Iter(test) [10000/15160]    eta: 0:04:02  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:21:28 - mmengine - INFO - Iter(test) [10050/15160]    eta: 0:03:59  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:21:31 - mmengine - INFO - Iter(test) [10100/15160]    eta: 0:03:57  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:21:33 - mmengine - INFO - Iter(test) [10150/15160]    eta: 0:03:55  time: 0.0460  data_time: 0.0011  memory: 1339  
07/30 23:21:35 - mmengine - INFO - Iter(test) [10200/15160]    eta: 0:03:52  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 23:21:38 - mmengine - INFO - Iter(test) [10250/15160]    eta: 0:03:50  time: 0.0458  data_time: 0.0011  memory: 1339  
07/30 23:21:40 - mmengine - INFO - Iter(test) [10300/15160]    eta: 0:03:47  time: 0.0455  data_time: 0.0010  memory: 1339  
07/30 23:21:42 - mmengine - INFO - Iter(test) [10350/15160]    eta: 0:03:45  time: 0.0448  data_time: 0.0012  memory: 1339  
07/30 23:21:44 - mmengine - INFO - Iter(test) [10400/15160]    eta: 0:03:43  time: 0.0473  data_time: 0.0012  memory: 1339  
07/30 23:21:47 - mmengine - INFO - Iter(test) [10450/15160]    eta: 0:03:40  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 23:21:49 - mmengine - INFO - Iter(test) [10500/15160]    eta: 0:03:38  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 23:21:51 - mmengine - INFO - Iter(test) [10550/15160]    eta: 0:03:36  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:21:53 - mmengine - INFO - Iter(test) [10600/15160]    eta: 0:03:33  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:21:56 - mmengine - INFO - Iter(test) [10650/15160]    eta: 0:03:31  time: 0.0448  data_time: 0.0011  memory: 1339  
07/30 23:21:58 - mmengine - INFO - Iter(test) [10700/15160]    eta: 0:03:28  time: 0.0450  data_time: 0.0011  memory: 1339  
07/30 23:22:00 - mmengine - INFO - Iter(test) [10750/15160]    eta: 0:03:26  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:22:02 - mmengine - INFO - Iter(test) [10800/15160]    eta: 0:03:24  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:22:05 - mmengine - INFO - Iter(test) [10850/15160]    eta: 0:03:21  time: 0.0457  data_time: 0.0010  memory: 1339  
07/30 23:22:07 - mmengine - INFO - Iter(test) [10900/15160]    eta: 0:03:19  time: 0.0455  data_time: 0.0011  memory: 1339  
07/30 23:22:09 - mmengine - INFO - Iter(test) [10950/15160]    eta: 0:03:17  time: 0.0456  data_time: 0.0010  memory: 1339  
07/30 23:22:12 - mmengine - INFO - Iter(test) [11000/15160]    eta: 0:03:14  time: 0.0454  data_time: 0.0010  memory: 1339  
07/30 23:22:14 - mmengine - INFO - Iter(test) [11050/15160]    eta: 0:03:12  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:22:16 - mmengine - INFO - Iter(test) [11100/15160]    eta: 0:03:09  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:22:18 - mmengine - INFO - Iter(test) [11150/15160]    eta: 0:03:07  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:22:21 - mmengine - INFO - Iter(test) [11200/15160]    eta: 0:03:05  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 23:22:23 - mmengine - INFO - Iter(test) [11250/15160]    eta: 0:03:02  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:22:26 - mmengine - INFO - Iter(test) [11300/15160]    eta: 0:03:00  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:22:28 - mmengine - INFO - Iter(test) [11350/15160]    eta: 0:02:58  time: 0.0440  data_time: 0.0010  memory: 1339  
07/30 23:22:30 - mmengine - INFO - Iter(test) [11400/15160]    eta: 0:02:55  time: 0.0439  data_time: 0.0010  memory: 1339  
07/30 23:22:33 - mmengine - INFO - Iter(test) [11450/15160]    eta: 0:02:53  time: 0.0452  data_time: 0.0010  memory: 1339  
07/30 23:22:35 - mmengine - INFO - Iter(test) [11500/15160]    eta: 0:02:51  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 23:22:37 - mmengine - INFO - Iter(test) [11550/15160]    eta: 0:02:48  time: 0.0440  data_time: 0.0010  memory: 1339  
07/30 23:22:39 - mmengine - INFO - Iter(test) [11600/15160]    eta: 0:02:46  time: 0.0444  data_time: 0.0009  memory: 1339  
07/30 23:22:42 - mmengine - INFO - Iter(test) [11650/15160]    eta: 0:02:44  time: 0.0439  data_time: 0.0009  memory: 1339  
07/30 23:22:44 - mmengine - INFO - Iter(test) [11700/15160]    eta: 0:02:41  time: 0.0460  data_time: 0.0010  memory: 1339  
07/30 23:22:46 - mmengine - INFO - Iter(test) [11750/15160]    eta: 0:02:39  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 23:22:48 - mmengine - INFO - Iter(test) [11800/15160]    eta: 0:02:37  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 23:22:51 - mmengine - INFO - Iter(test) [11850/15160]    eta: 0:02:34  time: 0.0460  data_time: 0.0010  memory: 1339  
07/30 23:22:53 - mmengine - INFO - Iter(test) [11900/15160]    eta: 0:02:32  time: 0.0442  data_time: 0.0009  memory: 1339  
07/30 23:22:55 - mmengine - INFO - Iter(test) [11950/15160]    eta: 0:02:29  time: 0.0447  data_time: 0.0009  memory: 1339  
07/30 23:22:57 - mmengine - INFO - Iter(test) [12000/15160]    eta: 0:02:27  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 23:23:00 - mmengine - INFO - Iter(test) [12050/15160]    eta: 0:02:25  time: 0.0443  data_time: 0.0009  memory: 1339  
07/30 23:23:02 - mmengine - INFO - Iter(test) [12100/15160]    eta: 0:02:22  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:23:04 - mmengine - INFO - Iter(test) [12150/15160]    eta: 0:02:20  time: 0.0453  data_time: 0.0010  memory: 1339  
07/30 23:23:06 - mmengine - INFO - Iter(test) [12200/15160]    eta: 0:02:18  time: 0.0449  data_time: 0.0011  memory: 1339  
07/30 23:23:08 - mmengine - INFO - Iter(test) [12250/15160]    eta: 0:02:15  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:23:11 - mmengine - INFO - Iter(test) [12300/15160]    eta: 0:02:13  time: 0.0453  data_time: 0.0011  memory: 1339  
07/30 23:23:13 - mmengine - INFO - Iter(test) [12350/15160]    eta: 0:02:11  time: 0.0450  data_time: 0.0010  memory: 1339  
07/30 23:23:15 - mmengine - INFO - Iter(test) [12400/15160]    eta: 0:02:08  time: 0.0456  data_time: 0.0011  memory: 1339  
07/30 23:23:18 - mmengine - INFO - Iter(test) [12450/15160]    eta: 0:02:06  time: 0.0447  data_time: 0.0011  memory: 1339  
07/30 23:23:20 - mmengine - INFO - Iter(test) [12500/15160]    eta: 0:02:04  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:23:22 - mmengine - INFO - Iter(test) [12550/15160]    eta: 0:02:01  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:23:25 - mmengine - INFO - Iter(test) [12600/15160]    eta: 0:01:59  time: 0.0451  data_time: 0.0011  memory: 1339  
07/30 23:23:27 - mmengine - INFO - Iter(test) [12650/15160]    eta: 0:01:57  time: 0.0446  data_time: 0.0010  memory: 1339  
07/30 23:23:29 - mmengine - INFO - Iter(test) [12700/15160]    eta: 0:01:54  time: 0.0445  data_time: 0.0010  memory: 1339  
07/30 23:23:31 - mmengine - INFO - Iter(test) [12750/15160]    eta: 0:01:52  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:23:34 - mmengine - INFO - Iter(test) [12800/15160]    eta: 0:01:50  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:23:36 - mmengine - INFO - Iter(test) [12850/15160]    eta: 0:01:47  time: 0.0448  data_time: 0.0010  memory: 1339  
07/30 23:23:38 - mmengine - INFO - Iter(test) [12900/15160]    eta: 0:01:45  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:23:40 - mmengine - INFO - Iter(test) [12950/15160]    eta: 0:01:42  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:23:43 - mmengine - INFO - Iter(test) [13000/15160]    eta: 0:01:40  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:23:45 - mmengine - INFO - Iter(test) [13050/15160]    eta: 0:01:38  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:23:47 - mmengine - INFO - Iter(test) [13100/15160]    eta: 0:01:35  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:23:49 - mmengine - INFO - Iter(test) [13150/15160]    eta: 0:01:33  time: 0.0474  data_time: 0.0010  memory: 1339  
07/30 23:23:51 - mmengine - INFO - Iter(test) [13200/15160]    eta: 0:01:31  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:23:54 - mmengine - INFO - Iter(test) [13250/15160]    eta: 0:01:28  time: 0.0443  data_time: 0.0010  memory: 1339  
07/30 23:23:56 - mmengine - INFO - Iter(test) [13300/15160]    eta: 0:01:26  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:23:58 - mmengine - INFO - Iter(test) [13350/15160]    eta: 0:01:24  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:24:00 - mmengine - INFO - Iter(test) [13400/15160]    eta: 0:01:21  time: 0.0446  data_time: 0.0009  memory: 1339  
07/30 23:24:03 - mmengine - INFO - Iter(test) [13450/15160]    eta: 0:01:19  time: 0.0442  data_time: 0.0009  memory: 1339  
07/30 23:24:05 - mmengine - INFO - Iter(test) [13500/15160]    eta: 0:01:17  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:24:07 - mmengine - INFO - Iter(test) [13550/15160]    eta: 0:01:14  time: 0.0456  data_time: 0.0009  memory: 1339  
07/30 23:24:09 - mmengine - INFO - Iter(test) [13600/15160]    eta: 0:01:12  time: 0.0460  data_time: 0.0010  memory: 1339  
07/30 23:24:12 - mmengine - INFO - Iter(test) [13650/15160]    eta: 0:01:10  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:24:14 - mmengine - INFO - Iter(test) [13700/15160]    eta: 0:01:07  time: 0.0440  data_time: 0.0010  memory: 1339  
07/30 23:24:16 - mmengine - INFO - Iter(test) [13750/15160]    eta: 0:01:05  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:24:18 - mmengine - INFO - Iter(test) [13800/15160]    eta: 0:01:03  time: 0.0441  data_time: 0.0010  memory: 1339  
07/30 23:24:21 - mmengine - INFO - Iter(test) [13850/15160]    eta: 0:01:00  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:24:23 - mmengine - INFO - Iter(test) [13900/15160]    eta: 0:00:58  time: 0.0444  data_time: 0.0010  memory: 1339  
07/30 23:24:25 - mmengine - INFO - Iter(test) [13950/15160]    eta: 0:00:56  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:24:27 - mmengine - INFO - Iter(test) [14000/15160]    eta: 0:00:53  time: 0.0448  data_time: 0.0009  memory: 1339  
07/30 23:24:30 - mmengine - INFO - Iter(test) [14050/15160]    eta: 0:00:51  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 23:24:32 - mmengine - INFO - Iter(test) [14100/15160]    eta: 0:00:49  time: 0.0442  data_time: 0.0010  memory: 1339  
07/30 23:24:34 - mmengine - INFO - Iter(test) [14150/15160]    eta: 0:00:46  time: 0.0442  data_time: 0.0009  memory: 1339  
07/30 23:24:36 - mmengine - INFO - Iter(test) [14200/15160]    eta: 0:00:44  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 23:24:38 - mmengine - INFO - Iter(test) [14250/15160]    eta: 0:00:42  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:24:41 - mmengine - INFO - Iter(test) [14300/15160]    eta: 0:00:39  time: 0.0456  data_time: 0.0009  memory: 1339  
07/30 23:24:43 - mmengine - INFO - Iter(test) [14350/15160]    eta: 0:00:37  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:24:45 - mmengine - INFO - Iter(test) [14400/15160]    eta: 0:00:35  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 23:24:47 - mmengine - INFO - Iter(test) [14450/15160]    eta: 0:00:32  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:24:50 - mmengine - INFO - Iter(test) [14500/15160]    eta: 0:00:30  time: 0.0451  data_time: 0.0010  memory: 1339  
07/30 23:24:52 - mmengine - INFO - Iter(test) [14550/15160]    eta: 0:00:28  time: 0.0449  data_time: 0.0010  memory: 1339  
07/30 23:24:54 - mmengine - INFO - Iter(test) [14600/15160]    eta: 0:00:25  time: 0.0490  data_time: 0.0009  memory: 1339  
07/30 23:24:56 - mmengine - INFO - Iter(test) [14650/15160]    eta: 0:00:23  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 23:24:59 - mmengine - INFO - Iter(test) [14700/15160]    eta: 0:00:21  time: 0.0439  data_time: 0.0009  memory: 1339  
07/30 23:25:01 - mmengine - INFO - Iter(test) [14750/15160]    eta: 0:00:19  time: 0.0440  data_time: 0.0009  memory: 1339  
07/30 23:25:03 - mmengine - INFO - Iter(test) [14800/15160]    eta: 0:00:16  time: 0.0447  data_time: 0.0010  memory: 1339  
07/30 23:25:05 - mmengine - INFO - Iter(test) [14850/15160]    eta: 0:00:14  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:25:07 - mmengine - INFO - Iter(test) [14900/15160]    eta: 0:00:12  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 23:25:10 - mmengine - INFO - Iter(test) [14950/15160]    eta: 0:00:09  time: 0.0445  data_time: 0.0009  memory: 1339  
07/30 23:25:12 - mmengine - INFO - Iter(test) [15000/15160]    eta: 0:00:07  time: 0.0443  data_time: 0.0009  memory: 1339  
07/30 23:25:14 - mmengine - INFO - Iter(test) [15050/15160]    eta: 0:00:05  time: 0.0452  data_time: 0.0009  memory: 1339  
07/30 23:25:16 - mmengine - INFO - Iter(test) [15100/15160]    eta: 0:00:02  time: 0.0441  data_time: 0.0009  memory: 1339  
07/30 23:25:19 - mmengine - INFO - Iter(test) [15150/15160]    eta: 0:00:00  time: 0.0443  data_time: 0.0009  memory: 1339  
07/30 23:25:19 - mmengine - WARNING - IoUMetric got empty `self.results`. Please ensure that the processed results are properly added into `self.results` in `process` method.
[E ProcessGroupNCCL.cpp:737] [Rank 0] Watchdog caught collective operation timeout: WorkNCCL(SeqNum=8, OpType=ALLREDUCE, Timeout(ms)=1800000) ran for 1806536 milliseconds before timing out.
Traceback (most recent call last):
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 123, in <module>
    main()
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 119, in main
    runner.test()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 1781, in test
[E ProcessGroupNCCL.cpp:414] Some NCCL operations have failed or timed out. Due to the asynchronous nature of CUDA kernels, subsequent GPU operations might run on corrupted/incomplete data. To avoid this inconsistency, we are taking the entire process down.
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 25968 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 25969 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 25970 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: -6) local_rank: 0 (pid: 25967) of binary: /home/jaehyunkang/anaconda3/envs/mmseg3/bin/python
Traceback (most recent call last):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
======================================================
tools/test.py FAILED
------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-07-30_23:55:30
  host      : node05.localdomain
  rank      : 0 (local_rank: 0)
  exitcode  : -6 (pid: 25967)
  error_file: <N/A>
  traceback : Signal 6 (SIGABRT) received by PID 25967
======================================================
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[W socket.cpp:401] [c10d] The server socket cannot be initialized on [::]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29502 (errno: 97 - Address family not supported by protocol).
07/30 23:55:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.17 (main, Jul  5 2023, 20:41:20) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 777
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /opt/ohpc/pub/apps/cuda/11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 777
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

07/30 23:55:37 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[
        87.33,
        91.29,
        83.01,
    ],
    std=[
        43.75,
        38.6,
        35.43,
    ],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[
            87.33,
            91.29,
            83.01,
        ],
        std=[
            43.75,
            38.6,
            35.43,
        ],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        )),
    pretrained='open-mmlab://resnest101',
    backbone=dict(
        type='ResNeSt',
        depth=101,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        dilations=(
            1,
            1,
            2,
            4,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        stem_channels=128,
        radix=2,
        reduction_factor=4,
        avg_down_stride=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss',
                loss_name='loss_ce',
                use_sigmoid=False,
                loss_weight=1.0),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=1.0),
        ]),
    auxiliary_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss', loss_name='loss_ce', loss_weight=0.4),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=0.4),
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'SatelliteDataset'
data_root = '../datasets/Satellite'
crop_size = (
    256,
    256,
)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='RandomCrop', crop_size=(
        256,
        256,
    )),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='PackSegInputs'),
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[
            [
                dict(type='Resize', scale_factor=0.5, keep_ratio=True),
                dict(type='Resize', scale_factor=0.75, keep_ratio=True),
                dict(type='Resize', scale_factor=1.0, keep_ratio=True),
                dict(type='Resize', scale_factor=1.25, keep_ratio=True),
                dict(type='Resize', scale_factor=1.5, keep_ratio=True),
                dict(type='Resize', scale_factor=1.75, keep_ratio=True),
            ],
            [
                dict(type='RandomFlip', prob=0.0, direction='horizontal'),
                dict(type='RandomFlip', prob=1.0, direction='horizontal'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ]),
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/train_2', seg_map_path='ann_dir/train_2'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='RandomCrop', crop_size=(
                256,
                256,
            )),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs'),
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/val_slice_2',
            seg_map_path='ann_dir/val_slice_2'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='PackSegInputs'),
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(img_path='img_dir/test'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='PackSegInputs'),
        ]))
val_evaluator = dict(
    type='IoUMetric', iou_metrics=[
        'mIoU',
        'mDice',
    ])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=[
        'mIoU',
    ],
    format_only=True,
    output_dir=
    'mask_inference_result/resnest_deeplabv3plus_fold2/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '../model_weights/resnest_deeplabv3plus_fold2.pth'
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(
    type='AdamW', lr=0.0001, betas=(
        0.9,
        0.999,
    ), weight_decay=0.005)
optim_wrapper = dict(
    type='AmpOptimWrapper',
    optimizer=dict(
        type='AdamW', lr=0.0001, betas=(
            0.9,
            0.999,
        ), weight_decay=0.005),
    clip_grad=None,
    loss_scale='dynamic')
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-06,
        power=1.0,
        begin=0,
        end=100000,
        by_epoch=False),
]
train_cfg = dict(
    type='IterBasedTrainLoop', max_iters=100000, val_interval=10000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook', draw=True, interval=1000))
test_img_size = (
    512,
    512,
)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='PackSegInputs'),
]
randomness = dict(seed=777)
launcher = 'pytorch'
work_dir = '_satellite/resnest_deeplabv3plus_fold2'

/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
07/30 23:55:40 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
07/30 23:55:41 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold2.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold2.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold2.pth
Loads checkpoint by local backend from path: ../model_weights/resnest_deeplabv3plus_fold2.pth
07/30 23:55:44 - mmengine - INFO - Load checkpoint from ../model_weights/resnest_deeplabv3plus_fold2.pth
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/datasets/transforms/loading.py:83: UserWarning: `reduce_zero_label` will be deprecated, if you would like to ignore the zero label, please set `reduce_zero_label=True` when dataset initialized
  warnings.warn('`reduce_zero_label` will be deprecated, '
07/30 23:55:45 - mmengine - INFO - resumed epoch: 0, iter: 90000
Traceback (most recent call last):
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 123, in <module>
    main()
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 119, in main
    runner.test()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 1781, in test
    metrics = self.test_loop.run()  # type: ignore
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/loops.py", line 434, in run
    for idx, data_batch in enumerate(self.dataloader):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 439, in __iter__
    self._iterator = self._get_iterator()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 390, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1115, in __init__
    self._reset(loader, first_iter=True)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1148, in _reset
    self._try_put_index()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 1393, in _try_put_index
    self._index_queues[worker_queue_idx].put((self._send_idx, index))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/multiprocessing/queues.py", line 94, in put
    self._start_thread()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/multiprocessing/queues.py", line 177, in _start_thread
    self._thread.start()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/threading.py", line 899, in start
    _start_new_thread(self._bootstrap, ())
RuntimeError: can't start new thread
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 30837 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 30839 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 30840 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 1 (pid: 30838) of binary: /home/jaehyunkang/anaconda3/envs/mmseg3/bin/python
Traceback (most recent call last):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
tools/test.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-07-30_23:55:57
  host      : node05.localdomain
  rank      : 1 (local_rank: 1)
  exitcode  : 1 (pid: 30838)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[W socket.cpp:401] [c10d] The server socket cannot be initialized on [::]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29503 (errno: 97 - Address family not supported by protocol).
07/30 23:56:03 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.17 (main, Jul  5 2023, 20:41:20) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 777
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /opt/ohpc/pub/apps/cuda/11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 777
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

07/30 23:56:03 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[
        87.33,
        91.29,
        83.01,
    ],
    std=[
        43.75,
        38.6,
        35.43,
    ],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[
            87.33,
            91.29,
            83.01,
        ],
        std=[
            43.75,
            38.6,
            35.43,
        ],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        )),
    pretrained='open-mmlab://resnest101',
    backbone=dict(
        type='ResNeSt',
        depth=101,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        dilations=(
            1,
            1,
            2,
            4,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        stem_channels=128,
        radix=2,
        reduction_factor=4,
        avg_down_stride=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss',
                loss_name='loss_ce',
                use_sigmoid=False,
                loss_weight=1.0),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=1.0),
        ]),
    auxiliary_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss', loss_name='loss_ce', loss_weight=0.4),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=0.4),
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'SatelliteDataset'
data_root = '../datasets/Satellite'
crop_size = (
    256,
    256,
)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='RandomCrop', crop_size=(
        256,
        256,
    )),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='PackSegInputs'),
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[
            [
                dict(type='Resize', scale_factor=0.5, keep_ratio=True),
                dict(type='Resize', scale_factor=0.75, keep_ratio=True),
                dict(type='Resize', scale_factor=1.0, keep_ratio=True),
                dict(type='Resize', scale_factor=1.25, keep_ratio=True),
                dict(type='Resize', scale_factor=1.5, keep_ratio=True),
                dict(type='Resize', scale_factor=1.75, keep_ratio=True),
            ],
            [
                dict(type='RandomFlip', prob=0.0, direction='horizontal'),
                dict(type='RandomFlip', prob=1.0, direction='horizontal'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ]),
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/train_3', seg_map_path='ann_dir/train_3'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='RandomCrop', crop_size=(
                256,
                256,
            )),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs'),
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/val_slice_3',
            seg_map_path='ann_dir/val_slice_3'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='PackSegInputs'),
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(img_path='img_dir/test'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='PackSegInputs'),
        ]))
val_evaluator = dict(
    type='IoUMetric', iou_metrics=[
        'mIoU',
        'mDice',
    ])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=[
        'mIoU',
    ],
    format_only=True,
    output_dir=
    'mask_inference_result/resnest_deeplabv3plus_fold3/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '../model_weights/resnest_deeplabv3plus_fold3.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(
    type='AdamW', lr=0.0001, betas=(
        0.9,
        0.999,
    ), weight_decay=0.005)
optim_wrapper = dict(
    type='AmpOptimWrapper',
    optimizer=dict(
        type='AdamW', lr=0.0001, betas=(
            0.9,
            0.999,
        ), weight_decay=0.005),
    clip_grad=None,
    loss_scale='dynamic')
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-06,
        power=1.0,
        begin=0,
        end=100000,
        by_epoch=False),
]
train_cfg = dict(
    type='IterBasedTrainLoop', max_iters=100000, val_interval=10000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook', draw=True, interval=1000))
test_img_size = (
    512,
    512,
)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='PackSegInputs'),
]
randomness = dict(seed=777)
launcher = 'pytorch'
work_dir = '_satellite/resnest_deeplabv3plus_fold3'

/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
Traceback (most recent call last):
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 123, in <module>
    main()
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 116, in main
    runner = Runner.from_cfg(cfg)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 443, in from_cfg
    runner = cls(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 412, in __init__
    self.model = self.wrap_model(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 879, in wrap_model
    model = MMDistributedDataParallel(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/model/wrappers/distributed.py", line 93, in __init__
    super().__init__(module=module, **kwargs)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 648, in __init__
    _sync_module_states(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/utils.py", line 113, in _sync_module_states
    _sync_params_and_buffers(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/utils.py", line 131, in _sync_params_and_buffers
    dist._broadcast_coalesced(
RuntimeError: CUDA out of memory. Tried to allocate 262.00 MiB (GPU 3; 23.70 GiB total capacity; 263.56 MiB already allocated; 246.69 MiB free; 272.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34619 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34620 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34621 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 3 (pid: 34622) of binary: /home/jaehyunkang/anaconda3/envs/mmseg3/bin/python
Traceback (most recent call last):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
tools/test.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-07-30_23:56:08
  host      : node05.localdomain
  rank      : 3 (local_rank: 3)
  exitcode  : 1 (pid: 34622)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
[W socket.cpp:401] [c10d] The server socket cannot be initialized on [::]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/utils/dl_utils/setup_env.py:56: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
[W socket.cpp:558] [c10d] The client socket cannot be initialized to connect to [localhost]:29504 (errno: 97 - Address family not supported by protocol).
07/30 23:56:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.17 (main, Jul  5 2023, 20:41:20) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 777
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /opt/ohpc/pub/apps/cuda/11.2
    NVCC: Cuda compilation tools, release 11.2, V11.2.67
    GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.8.0
    MMEngine: 0.8.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 777
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 4
------------------------------------------------------------

07/30 23:56:27 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[
        87.33,
        91.29,
        83.01,
    ],
    std=[
        43.75,
        38.6,
        35.43,
    ],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(
        256,
        256,
    ))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[
            87.33,
            91.29,
            83.01,
        ],
        std=[
            43.75,
            38.6,
            35.43,
        ],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(
            256,
            256,
        )),
    pretrained='open-mmlab://resnest101',
    backbone=dict(
        type='ResNeSt',
        depth=101,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        dilations=(
            1,
            1,
            2,
            4,
        ),
        strides=(
            1,
            2,
            1,
            1,
        ),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True,
        stem_channels=128,
        radix=2,
        reduction_factor=4,
        avg_down_stride=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss',
                loss_name='loss_ce',
                use_sigmoid=False,
                loss_weight=1.0),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=1.0),
        ]),
    auxiliary_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        dilations=(
            1,
            12,
            24,
            36,
        ),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=[
            dict(
                type='CrossEntropyLoss', loss_name='loss_ce', loss_weight=0.4),
            dict(
                type='LovaszLoss',
                loss_type='multi_class',
                classes=[
                    1,
                ],
                reduction='none',
                loss_weight=0.4),
        ]),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'SatelliteDataset'
data_root = '../datasets/Satellite'
crop_size = (
    256,
    256,
)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='RandomCrop', crop_size=(
        256,
        256,
    )),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs'),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='PackSegInputs'),
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[
            [
                dict(type='Resize', scale_factor=0.5, keep_ratio=True),
                dict(type='Resize', scale_factor=0.75, keep_ratio=True),
                dict(type='Resize', scale_factor=1.0, keep_ratio=True),
                dict(type='Resize', scale_factor=1.25, keep_ratio=True),
                dict(type='Resize', scale_factor=1.5, keep_ratio=True),
                dict(type='Resize', scale_factor=1.75, keep_ratio=True),
            ],
            [
                dict(type='RandomFlip', prob=0.0, direction='horizontal'),
                dict(type='RandomFlip', prob=1.0, direction='horizontal'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ]),
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/train_4', seg_map_path='ann_dir/train_4'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='RandomCrop', crop_size=(
                256,
                256,
            )),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs'),
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/Satellite',
        data_prefix=dict(
            img_path='img_dir/val_slice_4',
            seg_map_path='ann_dir/val_slice_4'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='LoadAnnotations', reduce_zero_label=False),
            dict(type='PackSegInputs'),
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='SatelliteDataset',
        data_root='../datasets/data/Satellite',
        data_prefix=dict(img_path='img_dir/test'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(
                512,
                512,
            ), keep_ratio=True),
            dict(type='PackSegInputs'),
        ]))
val_evaluator = dict(
    type='IoUMetric', iou_metrics=[
        'mIoU',
        'mDice',
    ])
test_evaluator = dict(
    type='IoUMetric',
    iou_metrics=[
        'mIoU',
    ],
    format_only=True,
    output_dir=
    'mask_inference_result/resnest_deeplabv3plus_fold4/format_results')
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '../model_weights/resnest_deeplabv3plus_fold4.pth'
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(
    type='AdamW', lr=0.0001, betas=(
        0.9,
        0.999,
    ), weight_decay=0.005)
optim_wrapper = dict(
    type='AmpOptimWrapper',
    optimizer=dict(
        type='AdamW', lr=0.0001, betas=(
            0.9,
            0.999,
        ), weight_decay=0.005),
    clip_grad=None,
    loss_scale='dynamic')
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=1e-06,
        power=1.0,
        begin=0,
        end=500000,
        by_epoch=False),
]
train_cfg = dict(
    type='IterBasedTrainLoop', max_iters=150000, val_interval=1000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook', draw=True, interval=1000))
test_img_size = (
    512,
    512,
)
val_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(
        512,
        512,
    ), keep_ratio=True),
    dict(type='LoadAnnotations', reduce_zero_label=False),
    dict(type='PackSegInputs'),
]
randomness = dict(seed=777)
launcher = 'pytorch'
work_dir = '_satellite/resnest_deeplabv3plus_fold4'

/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/backbones/resnet.py:431: UserWarning: DeprecationWarning: pretrained is a deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is a deprecated, '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/decode_heads/decode_head.py:120: UserWarning: For binary segmentation, we suggest using`out_channels = 1` to define the outputchannels of segmentor, and use `threshold`to convert `seg_logits` into a predictionapplying a threshold
  warnings.warn('For binary segmentation, we suggest using'
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/builder.py:36: UserWarning: ``build_loss`` would be deprecated soon, please use ``mmseg.registry.MODELS.build()`` 
  warnings.warn('``build_loss`` would be deprecated soon, please use '
/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
Traceback (most recent call last):
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 123, in <module>
    main()
  File "/home/jaehyunkang/Dacon_SpaceAI_Solution/mmsegmentation/tools/test.py", line 116, in main
    runner = Runner.from_cfg(cfg)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 443, in from_cfg
    runner = cls(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 412, in __init__
    self.model = self.wrap_model(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/runner/runner.py", line 879, in wrap_model
    model = MMDistributedDataParallel(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/mmengine/model/wrappers/distributed.py", line 93, in __init__
    super().__init__(module=module, **kwargs)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 648, in __init__
    _sync_module_states(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/utils.py", line 113, in _sync_module_states
    _sync_params_and_buffers(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/utils.py", line 131, in _sync_params_and_buffers
    dist._broadcast_coalesced(
RuntimeError: CUDA out of memory. Tried to allocate 262.00 MiB (GPU 3; 23.70 GiB total capacity; 263.56 MiB already allocated; 246.69 MiB free; 272.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34724 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34725 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 34726 closing signal SIGTERM
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 3 (pid: 34727) of binary: /home/jaehyunkang/anaconda3/envs/mmseg3/bin/python
Traceback (most recent call last):
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/run.py", line 752, in run
    elastic_launch(
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/jaehyunkang/anaconda3/envs/mmseg3/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
tools/test.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-07-30_23:56:32
  host      : node05.localdomain
  rank      : 3 (local_rank: 3)
  exitcode  : 1 (pid: 34727)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
###
### END DATE=Sun Jul 30 23:56:45 KST 2023
/var/spool/slurm/d/job398829/slurm_script: line 41: EOF: command not found
